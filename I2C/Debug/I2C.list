
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000259c  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b14  08007b14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b14  08007b14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000074  08007b90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08007b90  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4e7  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002000  00000000  00000000  0002d5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000815  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0b1  00000000  00000000  00030865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea98  00000000  00000000  0004b916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e140  00000000  00000000  0005a3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003050  00000000  00000000  000f84f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fb540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005560 	.word	0x08005560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005560 	.word	0x08005560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char digit[] = "0123456789";
 8000ab2:	4a9c      	ldr	r2, [pc, #624]	; (8000d24 <main+0x278>)
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aba:	c303      	stmia	r3!, {r0, r1}
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	0c12      	lsrs	r2, r2, #16
 8000ac2:	701a      	strb	r2, [r3, #0]
  char colon[] = ":";
 8000ac4:	233a      	movs	r3, #58	; 0x3a
 8000ac6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fc40 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f932 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 fa38 	bl	8000f44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad4:	f000 f986 	bl	8000de4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ad8:	f000 f9c4 	bl	8000e64 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fa02 	bl	8000ee4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000ae0:	f003 fe98 	bl	8004814 <ssd1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //init hours
  int m = 1, n = 2;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  //init seconds&minutes
  int i = 0, j = 0, k = 9, l = 4;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	2309      	movs	r3, #9
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	2304      	movs	r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
  while (1)
  {
	  temp_c = getTemp();
 8000afc:	f003 fdcc 	bl	8004698 <getTemp>
 8000b00:	6178      	str	r0, [r7, #20]

	  /* USER CODE END WHILE */
	  ssd1306_Fill(White);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f003 fef0 	bl	80048e8 <ssd1306_Fill>
	  //draw colon
	  ssd1306_SetCursor(56,20);
 8000b08:	2114      	movs	r1, #20
 8000b0a:	2038      	movs	r0, #56	; 0x38
 8000b0c:	f004 f83a 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteString(colon, Font_16x24, Black);
 8000b10:	4a85      	ldr	r2, [pc, #532]	; (8000d28 <main+0x27c>)
 8000b12:	1d38      	adds	r0, r7, #4
 8000b14:	2300      	movs	r3, #0
 8000b16:	ca06      	ldmia	r2, {r1, r2}
 8000b18:	f004 f80e 	bl	8004b38 <ssd1306_WriteString>

	  //draw second
	  ssd1306_SetCursor(115,26);
 8000b1c:	211a      	movs	r1, #26
 8000b1e:	2073      	movs	r0, #115	; 0x73
 8000b20:	f004 f830 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[i], Font_11x18, Black);
 8000b24:	f107 0208 	add.w	r2, r7, #8
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	4413      	add	r3, r2
 8000b2c:	7818      	ldrb	r0, [r3, #0]
 8000b2e:	4a7f      	ldr	r2, [pc, #508]	; (8000d2c <main+0x280>)
 8000b30:	2300      	movs	r3, #0
 8000b32:	ca06      	ldmia	r2, {r1, r2}
 8000b34:	f003 ff78 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(104,26);
 8000b38:	211a      	movs	r1, #26
 8000b3a:	2068      	movs	r0, #104	; 0x68
 8000b3c:	f004 f822 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[j], Font_11x18, Black);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	4413      	add	r3, r2
 8000b48:	7818      	ldrb	r0, [r3, #0]
 8000b4a:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <main+0x280>)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	ca06      	ldmia	r2, {r1, r2}
 8000b50:	f003 ff6a 	bl	8004a28 <ssd1306_WriteChar>

	  //draw minute
	  ssd1306_SetCursor(88,20);
 8000b54:	2114      	movs	r1, #20
 8000b56:	2058      	movs	r0, #88	; 0x58
 8000b58:	f004 f814 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[k], Font_16x24, Black);
 8000b5c:	f107 0208 	add.w	r2, r7, #8
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	4413      	add	r3, r2
 8000b64:	7818      	ldrb	r0, [r3, #0]
 8000b66:	4a70      	ldr	r2, [pc, #448]	; (8000d28 <main+0x27c>)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	ca06      	ldmia	r2, {r1, r2}
 8000b6c:	f003 ff5c 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(72,20);
 8000b70:	2114      	movs	r1, #20
 8000b72:	2048      	movs	r0, #72	; 0x48
 8000b74:	f004 f806 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[l], Font_16x24, Black);
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	4413      	add	r3, r2
 8000b80:	7818      	ldrb	r0, [r3, #0]
 8000b82:	4a69      	ldr	r2, [pc, #420]	; (8000d28 <main+0x27c>)
 8000b84:	2300      	movs	r3, #0
 8000b86:	ca06      	ldmia	r2, {r1, r2}
 8000b88:	f003 ff4e 	bl	8004a28 <ssd1306_WriteChar>

	  //draw hour
	  ssd1306_SetCursor(40,20);
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	2028      	movs	r0, #40	; 0x28
 8000b90:	f003 fff8 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[m], Font_16x24, Black);
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	4413      	add	r3, r2
 8000b9c:	7818      	ldrb	r0, [r3, #0]
 8000b9e:	4a62      	ldr	r2, [pc, #392]	; (8000d28 <main+0x27c>)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	ca06      	ldmia	r2, {r1, r2}
 8000ba4:	f003 ff40 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(24,20);
 8000ba8:	2114      	movs	r1, #20
 8000baa:	2018      	movs	r0, #24
 8000bac:	f003 ffea 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[n], Font_16x24, Black);
 8000bb0:	f107 0208 	add.w	r2, r7, #8
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	4413      	add	r3, r2
 8000bb8:	7818      	ldrb	r0, [r3, #0]
 8000bba:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <main+0x27c>)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	ca06      	ldmia	r2, {r1, r2}
 8000bc0:	f003 ff32 	bl	8004a28 <ssd1306_WriteChar>

	  ssd1306_SetCursor(5,5);
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f003 ffdc 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteString(temp_c, Font_6x8, Black);
 8000bcc:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <main+0x284>)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	ca06      	ldmia	r2, {r1, r2}
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f003 ffb0 	bl	8004b38 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000bd8:	f003 feaa 	bl	8004930 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f000 fc1a 	bl	8001418 <HAL_Delay>

	  ssd1306_Fill(White);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f003 fe7f 	bl	80048e8 <ssd1306_Fill>
	  //draw second
	  ssd1306_SetCursor(115,26);
 8000bea:	211a      	movs	r1, #26
 8000bec:	2073      	movs	r0, #115	; 0x73
 8000bee:	f003 ffc9 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[i], Font_11x18, Black);
 8000bf2:	f107 0208 	add.w	r2, r7, #8
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	4413      	add	r3, r2
 8000bfa:	7818      	ldrb	r0, [r3, #0]
 8000bfc:	4a4b      	ldr	r2, [pc, #300]	; (8000d2c <main+0x280>)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	ca06      	ldmia	r2, {r1, r2}
 8000c02:	f003 ff11 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(104,26);
 8000c06:	211a      	movs	r1, #26
 8000c08:	2068      	movs	r0, #104	; 0x68
 8000c0a:	f003 ffbb 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[j], Font_11x18, Black);
 8000c0e:	f107 0208 	add.w	r2, r7, #8
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	4413      	add	r3, r2
 8000c16:	7818      	ldrb	r0, [r3, #0]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <main+0x280>)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	ca06      	ldmia	r2, {r1, r2}
 8000c1e:	f003 ff03 	bl	8004a28 <ssd1306_WriteChar>

	  //draw minute
	  ssd1306_SetCursor(88,20);
 8000c22:	2114      	movs	r1, #20
 8000c24:	2058      	movs	r0, #88	; 0x58
 8000c26:	f003 ffad 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[k], Font_16x24, Black);
 8000c2a:	f107 0208 	add.w	r2, r7, #8
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4413      	add	r3, r2
 8000c32:	7818      	ldrb	r0, [r3, #0]
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <main+0x27c>)
 8000c36:	2300      	movs	r3, #0
 8000c38:	ca06      	ldmia	r2, {r1, r2}
 8000c3a:	f003 fef5 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(72,20);
 8000c3e:	2114      	movs	r1, #20
 8000c40:	2048      	movs	r0, #72	; 0x48
 8000c42:	f003 ff9f 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[l], Font_16x24, Black);
 8000c46:	f107 0208 	add.w	r2, r7, #8
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7818      	ldrb	r0, [r3, #0]
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <main+0x27c>)
 8000c52:	2300      	movs	r3, #0
 8000c54:	ca06      	ldmia	r2, {r1, r2}
 8000c56:	f003 fee7 	bl	8004a28 <ssd1306_WriteChar>

	  //draw hour
	  ssd1306_SetCursor(40,20);
 8000c5a:	2114      	movs	r1, #20
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f003 ff91 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[m], Font_16x24, Black);
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	4413      	add	r3, r2
 8000c6a:	7818      	ldrb	r0, [r3, #0]
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <main+0x27c>)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	ca06      	ldmia	r2, {r1, r2}
 8000c72:	f003 fed9 	bl	8004a28 <ssd1306_WriteChar>
	  ssd1306_SetCursor(24,20);
 8000c76:	2114      	movs	r1, #20
 8000c78:	2018      	movs	r0, #24
 8000c7a:	f003 ff83 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteChar(digit[n], Font_16x24, Black);
 8000c7e:	f107 0208 	add.w	r2, r7, #8
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	4413      	add	r3, r2
 8000c86:	7818      	ldrb	r0, [r3, #0]
 8000c88:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <main+0x27c>)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	ca06      	ldmia	r2, {r1, r2}
 8000c8e:	f003 fecb 	bl	8004a28 <ssd1306_WriteChar>

	  ssd1306_SetCursor(5,5);
 8000c92:	2105      	movs	r1, #5
 8000c94:	2005      	movs	r0, #5
 8000c96:	f003 ff75 	bl	8004b84 <ssd1306_SetCursor>
	  ssd1306_WriteString(temp_c, Font_6x8, Black);
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <main+0x284>)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	ca06      	ldmia	r2, {r1, r2}
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f003 ff49 	bl	8004b38 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000ca6:	f003 fe43 	bl	8004930 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 8000caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cae:	f000 fbb3 	bl	8001418 <HAL_Delay>

	  if(i < 9){
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	dc03      	bgt.n	8000cc0 <main+0x214>
		  i++;
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3301      	adds	r3, #1
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	e024      	b.n	8000d0a <main+0x25e>
	  }else{
		  i = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
		  j++;
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
		  if(j == 6){
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	2b06      	cmp	r3, #6
 8000cce:	d11c      	bne.n	8000d0a <main+0x25e>
			  j = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
			  k++;
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
			  if(k == 10){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	2b0a      	cmp	r3, #10
 8000cde:	d114      	bne.n	8000d0a <main+0x25e>
				  k = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
				  l++;
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
				  if(l == 6){
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d10c      	bne.n	8000d0a <main+0x25e>
					 l = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
					 m++;
 8000cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
					 if(m == 10){
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d104      	bne.n	8000d0a <main+0x25e>
						 m = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
						 n++;
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	3301      	adds	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
					 }
				  }
			  }
		  }
	  }
	  if(n == 2 && m == 4){
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	f47f aef5 	bne.w	8000afc <main+0x50>
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	f47f aef1 	bne.w	8000afc <main+0x50>
		  n = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
		  m = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  temp_c = getTemp();
 8000d22:	e6eb      	b.n	8000afc <main+0x50>
 8000d24:	08005578 	.word	0x08005578
 8000d28:	2000001c 	.word	0x2000001c
 8000d2c:	20000014 	.word	0x20000014
 8000d30:	2000000c 	.word	0x2000000c

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d3e:	2228      	movs	r2, #40	; 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 ff88 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2234      	movs	r2, #52	; 0x34
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 ff7a 	bl	8004c58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d78:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fce8 	bl	8002758 <HAL_RCC_OscConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d8e:	f000 f941 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fd10 	bl	80037d4 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dba:	f000 f92b 	bl	8001014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 ff37 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000dd8:	f000 f91c 	bl	8001014 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3770      	adds	r7, #112	; 0x70
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f000 fd8e 	bl	8001940 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f8f3 	bl	8001014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f001 fbf9 	bl	8002628 <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f8ea 	bl	8001014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f001 fc3b 	bl	80026be <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f8e1 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000090 	.word	0x20000090
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	2000090e 	.word	0x2000090e

08000e64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C2_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ea0:	f000 fd4e 	bl	8001940 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 f8b3 	bl	8001014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000eb2:	f001 fbb9 	bl	8002628 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 f8aa 	bl	8001014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ec4:	f001 fbfb 	bl	80026be <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f8a1 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000e4 	.word	0x200000e4
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	2000090e 	.word	0x2000090e

08000ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <MX_USART2_UART_Init+0x5c>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f28:	f003 f81c 	bl	8003f64 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f32:	f000 f86f 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000138 	.word	0x20000138
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0xc8>)
 8000fc2:	f000 fca5 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_GPIO_Init+0xcc>)
 8000fde:	f000 fb25 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_GPIO_Init+0xc8>)
 8000ffc:	f000 fb16 	bl	800162c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	e7fe      	b.n	800101c <Error_Handler+0x8>
	...

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x44>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x44>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x44>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x44>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001056:	2007      	movs	r0, #7
 8001058:	f000 fab4 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_I2C_MspInit+0x118>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d146      	bne.n	8001118 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a3d      	ldr	r2, [pc, #244]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f000 faa7 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ee:	2304      	movs	r3, #4
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4823      	ldr	r0, [pc, #140]	; (8001188 <HAL_I2C_MspInit+0x120>)
 80010fa:	f000 fa97 	bl	800162c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001116:	e02e      	b.n	8001176 <HAL_I2C_MspInit+0x10e>
  else if(hi2c->Instance==I2C2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_I2C_MspInit+0x124>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d129      	bne.n	8001176 <HAL_I2C_MspInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800113a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800114c:	2304      	movs	r3, #4
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f000 fa67 	bl	800162c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_I2C_MspInit+0x11c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40005400 	.word	0x40005400
 8001184:	40021000 	.word	0x40021000
 8001188:	48000400 	.word	0x48000400
 800118c:	40005800 	.word	0x40005800

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_UART_MspInit+0x7c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d128      	bne.n	8001204 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_UART_MspInit+0x80>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fa14 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004400 	.word	0x40004400
 8001210:	40021000 	.word	0x40021000

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8ba 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f003 fce6 	bl	8004c68 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20004000 	.word	0x20004000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200001c0 	.word	0x200001c0
 80012d0:	20000730 	.word	0x20000730

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff ffea 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f003 fca5 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fbbf 	bl	8000aac <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001330:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800133c:	08007b1c 	.word	0x08007b1c
  ldr r2, =_sbss
 8001340:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001344:	2000072c 	.word	0x2000072c

08001348 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_IRQHandler>
	...

0800134c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f931 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fe5a 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f93b 	bl	8001612 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b4:	f000 f911 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	200001c4 	.word	0x200001c4

08001400 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;  
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200001c4 	.word	0x200001c4

08001418 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5c 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb0 	bl	8001580 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e14e      	b.n	80018da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8140 	beq.w	80018d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 809a 	beq.w	80018d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b52      	ldr	r3, [pc, #328]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e2:	d013      	beq.n	800180c <HAL_GPIO_Init+0x1e0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a46      	ldr	r2, [pc, #280]	; (8001900 <HAL_GPIO_Init+0x2d4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1dc>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a45      	ldr	r2, [pc, #276]	; (8001904 <HAL_GPIO_Init+0x2d8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1d8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a44      	ldr	r2, [pc, #272]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1d4>
 80017fc:	2303      	movs	r3, #3
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001800:	2305      	movs	r3, #5
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001804:	2302      	movs	r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 800180c:	2300      	movs	r3, #0
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800181e:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_GPIO_Init+0x2e0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_GPIO_Init+0x2e0>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_GPIO_Init+0x2e0>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_GPIO_Init+0x2e0>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_GPIO_Init+0x2e0>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_GPIO_Init+0x2e0>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_GPIO_Init+0x2e0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_GPIO_Init+0x2e0>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f47f aea9 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	48000400 	.word	0x48000400
 8001904:	48000800 	.word	0x48000800
 8001908:	48000c00 	.word	0x48000c00
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800192c:	e002      	b.n	8001934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e081      	b.n	8001a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fb7e 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e006      	b.n	80019c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d104      	bne.n	80019da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69d9      	ldr	r1, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
 8001a70:	4613      	mov	r3, r2
 8001a72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 80da 	bne.w	8001c36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_Master_Transmit+0x30>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0d3      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a98:	f7ff fcb2 	bl	8001400 <HAL_GetTick>
 8001a9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2319      	movs	r3, #25
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb4e 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0be      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	; 0x21
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d90e      	bls.n	8001b0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	8979      	ldrh	r1, [r7, #10]
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fd5e 	bl	80025c4 <I2C_TransferConfig>
 8001b08:	e06c      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fd4d 	bl	80025c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b2a:	e05b      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	6a39      	ldr	r1, [r7, #32]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fb5a 	bl	80021ea <I2C_WaitOnTXISFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e07b      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d034      	beq.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d130      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fadd 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e04d      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d90e      	bls.n	8001bc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 fd01 	bl	80025c4 <I2C_TransferConfig>
 8001bc2:	e00f      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	8979      	ldrh	r1, [r7, #10]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fcf0 	bl	80025c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d19e      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fb40 	bl	8002278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01a      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c16:	400b      	ands	r3, r1
 8001c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	80002000 	.word	0x80002000
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	460b      	mov	r3, r1
 8001c56:	817b      	strh	r3, [r7, #10]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	f040 80db 	bne.w	8001e20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x30>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0d4      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c80:	f7ff fbbe 	bl	8001400 <HAL_GetTick>
 8001c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2319      	movs	r3, #25
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fa5a 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0bf      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2222      	movs	r2, #34	; 0x22
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2210      	movs	r2, #16
 8001cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	893a      	ldrh	r2, [r7, #8]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2bff      	cmp	r3, #255	; 0xff
 8001cd2:	d90e      	bls.n	8001cf2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	8979      	ldrh	r1, [r7, #10]
 8001ce2:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <HAL_I2C_Master_Receive+0x1e4>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fc6a 	bl	80025c4 <I2C_TransferConfig>
 8001cf0:	e06d      	b.n	8001dce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	8979      	ldrh	r1, [r7, #10]
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_I2C_Master_Receive+0x1e4>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fc59 	bl	80025c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d12:	e05c      	b.n	8001dce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	6a39      	ldr	r1, [r7, #32]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 faf1 	bl	8002300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07c      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d034      	beq.n	8001dce <HAL_I2C_Master_Receive+0x186>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d130      	bne.n	8001dce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f9e8 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e04d      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d90e      	bls.n	8001dae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fc0c 	bl	80025c4 <I2C_TransferConfig>
 8001dac:	e00f      	b.n	8001dce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	8979      	ldrh	r1, [r7, #10]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fbfb 	bl	80025c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d19d      	bne.n	8001d14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	6a39      	ldr	r1, [r7, #32]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fa4b 	bl	8002278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e01a      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_I2C_Master_Receive+0x1e8>)
 8001e00:	400b      	ands	r3, r1
 8001e02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
  }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	80002400 	.word	0x80002400
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	817b      	strh	r3, [r7, #10]
 8001e46:	460b      	mov	r3, r1
 8001e48:	813b      	strh	r3, [r7, #8]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	f040 80f9 	bne.w	800204e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x34>
 8001e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0ed      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Mem_Write+0x4e>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0e6      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e8a:	f7ff fab9 	bl	8001400 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2319      	movs	r3, #25
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f955 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d1      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2221      	movs	r2, #33	; 0x21
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ed4:	88f8      	ldrh	r0, [r7, #6]
 8001ed6:	893a      	ldrh	r2, [r7, #8]
 8001ed8:	8979      	ldrh	r1, [r7, #10]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f8b9 	bl	800205c <I2C_RequestMemoryWrite>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0a9      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d90e      	bls.n	8001f24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fb51 	bl	80025c4 <I2C_TransferConfig>
 8001f22:	e00f      	b.n	8001f44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	8979      	ldrh	r1, [r7, #10]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fb40 	bl	80025c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f94e 	bl	80021ea <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e07b      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x1c8>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f8d1 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04d      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 faf5 	bl	80025c4 <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fae4 	bl	80025c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d19e      	bne.n	8001f44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f934 	bl	8002278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01a      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_I2C_Mem_Write+0x224>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	fe00e800 	.word	0xfe00e800

0800205c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	817b      	strh	r3, [r7, #10]
 800206e:	460b      	mov	r3, r1
 8002070:	813b      	strh	r3, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <I2C_RequestMemoryWrite+0xa4>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fa9d 	bl	80025c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	69b9      	ldr	r1, [r7, #24]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f8ab 	bl	80021ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e02c      	b.n	80020f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a4:	893b      	ldrh	r3, [r7, #8]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
 80020ae:	e015      	b.n	80020dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020b0:	893b      	ldrh	r3, [r7, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	69b9      	ldr	r1, [r7, #24]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f891 	bl	80021ea <I2C_WaitOnTXISFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e012      	b.n	80020f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d2:	893b      	ldrh	r3, [r7, #8]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f830 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	80002000 	.word	0x80002000

08002104 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d103      	bne.n	8002122 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d007      	beq.n	8002140 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	619a      	str	r2, [r3, #24]
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	e031      	b.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002164:	d02d      	beq.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7ff f94b 	bl	8001400 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d122      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	429a      	cmp	r2, r3
 8002198:	d113      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f043 0220 	orr.w	r2, r3, #32
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d0be      	beq.n	800215e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f6:	e033      	b.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f901 	bl	8002404 <I2C_IsErrorOccurred>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e031      	b.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002212:	d025      	beq.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7ff f8f4 	bl	8001400 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d11a      	bne.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d013      	beq.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d1c4      	bne.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002284:	e02f      	b.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8ba 	bl	8002404 <I2C_IsErrorOccurred>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e02d      	b.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff f8b1 	bl	8001400 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11a      	bne.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d013      	beq.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d1c8      	bne.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800230c:	e06b      	b.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f876 	bl	8002404 <I2C_IsErrorOccurred>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e069      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b20      	cmp	r3, #32
 800232e:	d138      	bne.n	80023a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d105      	bne.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e055      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d107      	bne.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2204      	movs	r2, #4
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
 8002366:	e002      	b.n	800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e029      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7ff f82d 	bl	8001400 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d116      	bne.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00f      	beq.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e007      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d18c      	bne.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	fe00e800 	.word	0xfe00e800

08002404 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d068      	beq.n	8002502 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2210      	movs	r2, #16
 8002436:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002438:	e049      	b.n	80024ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002440:	d045      	beq.n	80024ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002442:	f7fe ffdd 	bl	8001400 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <I2C_IsErrorOccurred+0x54>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13a      	bne.n	80024ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800246a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247a:	d121      	bne.n	80024c0 <I2C_IsErrorOccurred+0xbc>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002482:	d01d      	beq.n	80024c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b20      	cmp	r3, #32
 8002488:	d01a      	beq.n	80024c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002498:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800249a:	f7fe ffb1 	bl	8001400 <HAL_GetTick>
 800249e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a0:	e00e      	b.n	80024c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024a2:	f7fe ffad 	bl	8001400 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b19      	cmp	r3, #25
 80024ae:	d907      	bls.n	80024c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f043 0320 	orr.w	r3, r3, #32
 80024b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024be:	e006      	b.n	80024ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d1e9      	bne.n	80024a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d003      	beq.n	80024e4 <I2C_IsErrorOccurred+0xe0>
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0aa      	beq.n	800243a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01c      	beq.n	80025b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fdc3 	bl	8002104 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <I2C_IsErrorOccurred+0x1bc>)
 800258a:	400b      	ands	r3, r1
 800258c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3728      	adds	r7, #40	; 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	fe00e800 	.word	0xfe00e800

080025c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	4613      	mov	r3, r2
 80025d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025dc:	7a7b      	ldrb	r3, [r7, #9]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	0d5b      	lsrs	r3, r3, #21
 80025fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <I2C_TransferConfig+0x60>)
 8002604:	430b      	orrs	r3, r1
 8002606:	43db      	mvns	r3, r3
 8002608:	ea02 0103 	and.w	r1, r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	03ff63ff 	.word	0x03ff63ff

08002628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d138      	bne.n	80026b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002648:	2302      	movs	r3, #2
 800264a:	e032      	b.n	80026b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d139      	bne.n	8002748 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026de:	2302      	movs	r3, #2
 80026e0:	e033      	b.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2224      	movs	r2, #36	; 0x24
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800275e:	af00      	add	r7, sp, #0
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f001 b823 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 817d 	beq.w	8002a8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002794:	4bbc      	ldr	r3, [pc, #752]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b04      	cmp	r3, #4
 800279e:	d00c      	beq.n	80027ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a0:	4bb9      	ldr	r3, [pc, #740]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d15c      	bne.n	8002866 <HAL_RCC_OscConfig+0x10e>
 80027ac:	4bb6      	ldr	r3, [pc, #728]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d155      	bne.n	8002866 <HAL_RCC_OscConfig+0x10e>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x94>
 80027e6:	4ba8      	ldr	r3, [pc, #672]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0xc0>
 80027ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002804:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002808:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002814:	4b9c      	ldr	r3, [pc, #624]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800281c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002820:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002824:	fa92 f2a2 	rbit	r2, r2
 8002828:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800282c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 811f 	beq.w	8002a8c <HAL_RCC_OscConfig+0x334>
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8116 	bne.w	8002a8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f000 bfaf 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x12e>
 8002878:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a82      	ldr	r2, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e036      	b.n	80028f4 <HAL_RCC_OscConfig+0x19c>
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x158>
 8002896:	4b7c      	ldr	r3, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7b      	ldr	r2, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a78      	ldr	r2, [pc, #480]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e021      	b.n	80028f4 <HAL_RCC_OscConfig+0x19c>
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x184>
 80028c2:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a70      	ldr	r2, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6d      	ldr	r2, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0x19c>
 80028dc:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f023 020f 	bic.w	r2, r3, #15
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	495f      	ldr	r1, [pc, #380]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800290a:	4313      	orrs	r3, r2
 800290c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d059      	beq.n	80029d2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fd6f 	bl	8001400 <HAL_GetTick>
 8002922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fd6a 	bl	8001400 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d902      	bls.n	800293e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	f000 bf43 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 800293e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002942:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002952:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_RCC_OscConfig+0x218>
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e015      	b.n	800299c <HAL_RCC_OscConfig+0x244>
 8002970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002974:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800298c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002998:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029a0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f002 021f 	and.w	r2, r2, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ab      	beq.n	8002928 <HAL_RCC_OscConfig+0x1d0>
 80029d0:	e05d      	b.n	8002a8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fd15 	bl	8001400 <HAL_GetTick>
 80029d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fd10 	bl	8001400 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d902      	bls.n	80029f2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f000 bee9 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 80029f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2cc>
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e015      	b.n	8002a50 <HAL_RCC_OscConfig+0x2f8>
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f042 0220 	orr.w	r2, r2, #32
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f002 021f 	and.w	r2, r2, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ab      	bne.n	80029dc <HAL_RCC_OscConfig+0x284>
 8002a84:	e003      	b.n	8002a8e <HAL_RCC_OscConfig+0x336>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 817d 	beq.w	8002d9e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ab0:	4ba3      	ldr	r3, [pc, #652]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d172      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x44a>
 8002abc:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d16c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x44a>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ada:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_RCC_OscConfig+0x3a0>
 8002af2:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e013      	b.n	8002b20 <HAL_RCC_OscConfig+0x3c8>
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b1c:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2202      	movs	r2, #2
 8002b22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b2a:	fa92 f2a2 	rbit	r2, r2
 8002b2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b36:	fab2 f282 	clz	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f042 0220 	orr.w	r2, r2, #32
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f002 021f 	and.w	r2, r2, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCC_OscConfig+0x410>
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f000 be2e 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	21f8      	movs	r1, #248	; 0xf8
 8002b7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b86:	fa91 f1a1 	rbit	r1, r1
 8002b8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b92:	fab1 f181 	clz	r1, r1
 8002b96:	b2c9      	uxtb	r1, r1
 8002b98:	408b      	lsls	r3, r1
 8002b9a:	4969      	ldr	r1, [pc, #420]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba0:	e0fd      	b.n	8002d9e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8088 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x56c>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fc0e 	bl	8001400 <HAL_GetTick>
 8002be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fc09 	bl	8001400 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	f000 bde2 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4d8>
 8002c2a:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x500>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0af      	beq.n	8002bea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	21f8      	movs	r1, #248	; 0xf8
 8002ca0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ca8:	fa91 f1a1 	rbit	r1, r1
 8002cac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cb0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cb4:	fab1 f181 	clz	r1, r1
 8002cb8:	b2c9      	uxtb	r1, r1
 8002cba:	408b      	lsls	r3, r1
 8002cbc:	4920      	ldr	r1, [pc, #128]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
 8002cc2:	e06c      	b.n	8002d9e <HAL_RCC_OscConfig+0x646>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	461a      	mov	r2, r3
 8002cec:	2300      	movs	r3, #0
 8002cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fb86 	bl	8001400 <HAL_GetTick>
 8002cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fb81 	bl	8001400 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f000 bd5a 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d104      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5ec>
 8002d3a:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <HAL_RCC_OscConfig+0x5e8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_OscConfig+0x614>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d68:	4bc8      	ldr	r3, [pc, #800]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ad      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8110 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d079      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x760>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4bab      	ldr	r3, [pc, #684]	; (8003090 <HAL_RCC_OscConfig+0x938>)
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	461a      	mov	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fb07 	bl	8001400 <HAL_GetTick>
 8002df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe fb02 	bl	8001400 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d902      	bls.n	8002e0e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f000 bcdb 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e28:	2202      	movs	r2, #2
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fa93 f2a3 	rbit	r2, r3
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e68:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e74:	2102      	movs	r1, #2
 8002e76:	6019      	str	r1, [r3, #0]
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fa93 f1a3 	rbit	r1, r3
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e8e:	6019      	str	r1, [r3, #0]
  return result;
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0a0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x6a0>
 8002eb6:	e08d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x87c>
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eda:	601a      	str	r2, [r3, #0]
  return result;
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ee4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_RCC_OscConfig+0x938>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fa81 	bl	8001400 <HAL_GetTick>
 8002efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe fa7c 	bl	8001400 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d902      	bls.n	8002f1a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	f000 bc55 	b.w	80037c4 <HAL_RCC_OscConfig+0x106c>
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f22:	2202      	movs	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f46:	2202      	movs	r2, #2
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f2a3 	rbit	r2, r3
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f92:	2102      	movs	r1, #2
 8002f94:	6019      	str	r1, [r3, #0]
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f1a3 	rbit	r1, r3
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fac:	6019      	str	r1, [r3, #0]
  return result;
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d197      	bne.n	8002f04 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 81a1 	beq.w	800332c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	61d3      	str	r3, [r2, #28]
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_OscConfig+0x934>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003022:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d11a      	bne.n	800306c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe f9dd 	bl	8001400 <HAL_GetTick>
 8003046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	e009      	b.n	8003060 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe f9d8 	bl	8001400 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e3b1      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ef      	beq.n	800304c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <HAL_RCC_OscConfig+0x940>
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_RCC_OscConfig+0x934>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4a02      	ldr	r2, [pc, #8]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	e03c      	b.n	8003104 <HAL_RCC_OscConfig+0x9ac>
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	10908120 	.word	0x10908120
 8003094:	40007000 	.word	0x40007000
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10c      	bne.n	80030c2 <HAL_RCC_OscConfig+0x96a>
 80030a8:	4bc1      	ldr	r3, [pc, #772]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4ac0      	ldr	r2, [pc, #768]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6213      	str	r3, [r2, #32]
 80030b4:	4bbe      	ldr	r3, [pc, #760]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	4abd      	ldr	r2, [pc, #756]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	6213      	str	r3, [r2, #32]
 80030c0:	e020      	b.n	8003104 <HAL_RCC_OscConfig+0x9ac>
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x994>
 80030d2:	4bb7      	ldr	r3, [pc, #732]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4ab6      	ldr	r2, [pc, #728]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	4bb4      	ldr	r3, [pc, #720]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4ab3      	ldr	r2, [pc, #716]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x9ac>
 80030ec:	4bb0      	ldr	r3, [pc, #704]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4aaf      	ldr	r2, [pc, #700]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	4bad      	ldr	r3, [pc, #692]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4aac      	ldr	r2, [pc, #688]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8081 	beq.w	8003218 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe f973 	bl	8001400 <HAL_GetTick>
 800311a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe f96e 	bl	8001400 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e345      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003140:	2202      	movs	r2, #2
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003164:	2202      	movs	r2, #2
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003188:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0xa4c>
 800319e:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	e013      	b.n	80031cc <HAL_RCC_OscConfig+0xa74>
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031ac:	2202      	movs	r2, #2
 80031ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f2a3 	rbit	r2, r3
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031d4:	2102      	movs	r1, #2
 80031d6:	6011      	str	r1, [r2, #0]
 80031d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	fa92 f1a2 	rbit	r1, r2
 80031e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031ee:	6011      	str	r1, [r2, #0]
  return result;
 80031f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d084      	beq.n	8003120 <HAL_RCC_OscConfig+0x9c8>
 8003216:	e07f      	b.n	8003318 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe f8f2 	bl	8001400 <HAL_GetTick>
 800321c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f8ed 	bl	8001400 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e2c4      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003242:	2202      	movs	r2, #2
 8003244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003266:	2202      	movs	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003280:	601a      	str	r2, [r3, #0]
  return result;
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800328a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0xb4e>
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	e013      	b.n	80032ce <HAL_RCC_OscConfig+0xb76>
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032d6:	2102      	movs	r1, #2
 80032d8:	6011      	str	r1, [r2, #0]
 80032da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	fa92 f1a2 	rbit	r1, r2
 80032e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032f0:	6011      	str	r1, [r2, #0]
  return result;
 80032f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fab2 f282 	clz	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f002 021f 	and.w	r2, r2, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d184      	bne.n	8003222 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003318:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8242 	beq.w	80037c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_RCC_OscConfig+0xc58>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b08      	cmp	r3, #8
 8003348:	f000 8213 	beq.w	8003772 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b02      	cmp	r3, #2
 800335a:	f040 8162 	bne.w	8003622 <HAL_RCC_OscConfig+0xeca>
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800338c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe f82c 	bl	8001400 <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ac:	e00c      	b.n	80033c8 <HAL_RCC_OscConfig+0xc70>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe f824 	bl	8001400 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1fd      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033ec:	601a      	str	r2, [r3, #0]
  return result;
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0xcba>
 800340c:	4bb0      	ldr	r3, [pc, #704]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	e027      	b.n	8003462 <HAL_RCC_OscConfig+0xd0a>
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800341a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	4b9c      	ldr	r3, [pc, #624]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003466:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800346a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003474:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	fa92 f1a2 	rbit	r1, r2
 800347e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003482:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003486:	6011      	str	r1, [r2, #0]
  return result;
 8003488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d182      	bne.n	80033b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ae:	4b88      	ldr	r3, [pc, #544]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	497f      	ldr	r1, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	fa93 f2a3 	rbit	r2, r3
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034fa:	601a      	str	r2, [r3, #0]
  return result;
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003504:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	461a      	mov	r2, r3
 8003518:	2301      	movs	r3, #1
 800351a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd ff70 	bl	8001400 <HAL_GetTick>
 8003520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003524:	e009      	b.n	800353a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd ff6b 	bl	8001400 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e144      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800355e:	601a      	str	r2, [r3, #0]
  return result;
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_RCC_OscConfig+0xe2c>
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e027      	b.n	80035d4 <HAL_RCC_OscConfig+0xe7c>
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800358c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	fa92 f1a2 	rbit	r1, r2
 80035f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035f8:	6011      	str	r1, [r2, #0]
  return result;
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d082      	beq.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8003620:	e0cf      	b.n	80037c2 <HAL_RCC_OscConfig+0x106a>
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800362a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800362e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003646:	601a      	str	r2, [r3, #0]
  return result;
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003650:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800365c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	461a      	mov	r2, r3
 8003664:	2300      	movs	r3, #0
 8003666:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd feca 	bl	8001400 <HAL_GetTick>
 800366c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003670:	e009      	b.n	8003686 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003672:	f7fd fec5 	bl	8001400 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e09e      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800368e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036aa:	601a      	str	r2, [r3, #0]
  return result;
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d104      	bne.n	80036d4 <HAL_RCC_OscConfig+0xf7c>
 80036ca:	4b01      	ldr	r3, [pc, #4]	; (80036d0 <HAL_RCC_OscConfig+0xf78>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	e029      	b.n	8003724 <HAL_RCC_OscConfig+0xfcc>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <HAL_RCC_OscConfig+0x1078>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003728:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800372c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003730:	6011      	str	r1, [r2, #0]
 8003732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003736:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	fa92 f1a2 	rbit	r1, r2
 8003740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003744:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003748:	6011      	str	r1, [r2, #0]
  return result;
 800374a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800374e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f002 021f 	and.w	r2, r2, #31
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d180      	bne.n	8003672 <HAL_RCC_OscConfig+0xf1a>
 8003770:	e027      	b.n	80037c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e01e      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_OscConfig+0x1078>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800378e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003792:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10b      	bne.n	80037be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b09e      	sub	sp, #120	; 0x78
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e162      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	498b      	ldr	r1, [pc, #556]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e14a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b82      	ldr	r3, [pc, #520]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	497f      	ldr	r1, [pc, #508]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80dc 	beq.w	8003a00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d13c      	bne.n	80038ca <HAL_RCC_ClockConfig+0xf6>
 8003850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003854:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_RCC_ClockConfig+0xa6>
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	e00f      	b.n	800389a <HAL_RCC_ClockConfig+0xc6>
 800387a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	667b      	str	r3, [r7, #100]	; 0x64
 8003888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389e:	65ba      	str	r2, [r7, #88]	; 0x58
 80038a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d17b      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0f3      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d13c      	bne.n	800394c <HAL_RCC_ClockConfig+0x178>
 80038d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_ClockConfig+0x128>
 80038f6:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_RCC_ClockConfig+0x148>
 80038fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
 8003910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003918:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	63ba      	str	r2, [r7, #56]	; 0x38
 8003922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f002 021f 	and.w	r2, r2, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d13a      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b2      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
 800394c:	2302      	movs	r3, #2
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1a0>
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e00d      	b.n	8003990 <HAL_RCC_ClockConfig+0x1bc>
 8003974:	2302      	movs	r3, #2
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	2302      	movs	r3, #2
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	61ba      	str	r2, [r7, #24]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	fa92 f2a2 	rbit	r2, r2
 800399a:	617a      	str	r2, [r7, #20]
  return result;
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	fab2 f282 	clz	r2, r2
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f042 0220 	orr.w	r2, r2, #32
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f002 021f 	and.w	r2, r2, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e079      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	491a      	ldr	r1, [pc, #104]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fd16 	bl	8001400 <HAL_GetTick>
 80039d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fd fd12 	bl	8001400 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e061      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d214      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4906      	ldr	r1, [pc, #24]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e040      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4912      	ldr	r1, [pc, #72]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a76:	f000 f829 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a84:	22f0      	movs	r2, #240	; 0xf0
 8003a86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	fa92 f2a2 	rbit	r2, r2
 8003a8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	fab2 f282 	clz	r2, r2
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	40d3      	lsrs	r3, r2
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x2ec>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
 8003a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <HAL_RCC_ClockConfig+0x2f0>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_ClockConfig+0x2f4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fc64 	bl	8001378 <HAL_InitTick>
  
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3778      	adds	r7, #120	; 0x78
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800558c 	.word	0x0800558c
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000004 	.word	0x20000004

08003acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b08b      	sub	sp, #44	; 0x2c
 8003ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x30>
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x36>
 8003afa:	e03c      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	e03c      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	607a      	str	r2, [r7, #4]
  return result;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	40d3      	lsrs	r3, r2
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	220f      	movs	r2, #15
 8003b30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	60fa      	str	r2, [r7, #12]
  return result;
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	40d3      	lsrs	r3, r2
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b54:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e004      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	623b      	str	r3, [r7, #32]
      break;
 8003b74:	e002      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b78:	623b      	str	r3, [r7, #32]
      break;
 8003b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	372c      	adds	r7, #44	; 0x2c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	007a1200 	.word	0x007a1200
 8003b94:	080055a4 	.word	0x080055a4
 8003b98:	080055b4 	.word	0x080055b4
 8003b9c:	003d0900 	.word	0x003d0900

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bbe:	f7ff ffef 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc2:	4601      	mov	r1, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	fa92 f2a2 	rbit	r2, r2
 8003bd8:	603a      	str	r2, [r7, #0]
  return result;
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	fab2 f282 	clz	r2, r2
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	40d3      	lsrs	r3, r2
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	0800559c 	.word	0x0800559c

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c02:	f7ff ffcd 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003c06:	4601      	mov	r1, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	fa92 f2a2 	rbit	r2, r2
 8003c1c:	603a      	str	r2, [r7, #0]
  return result;
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	fab2 f282 	clz	r2, r2
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	40d3      	lsrs	r3, r2
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	0800559c 	.word	0x0800559c

08003c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b092      	sub	sp, #72	; 0x48
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80d4 	beq.w	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c64:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10e      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4a4a      	ldr	r2, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	61d3      	str	r3, [r2, #28]
 8003c7c:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b45      	ldr	r3, [pc, #276]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9a:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a41      	ldr	r2, [pc, #260]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fbab 	bl	8001400 <HAL_GetTick>
 8003caa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fd fba7 	bl	8001400 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b64      	cmp	r3, #100	; 0x64
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e14b      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8084 	beq.w	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d07c      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	461a      	mov	r2, r3
 8003d16:	2301      	movs	r3, #1
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d04b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fb57 	bl	8001400 <HAL_GetTick>
 8003d52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fd fb53 	bl	8001400 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0f5      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	2302      	movs	r3, #2
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
  return result;
 8003d84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d108      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d9a:	4b01      	ldr	r3, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	e00d      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
 8003da8:	10908100 	.word	0x10908100
 8003dac:	2302      	movs	r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	613a      	str	r2, [r7, #16]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	fa92 f2a2 	rbit	r2, r2
 8003dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0b7      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003de6:	4b5e      	ldr	r3, [pc, #376]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	495b      	ldr	r1, [pc, #364]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e00:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e18:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f023 0203 	bic.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	494e      	ldr	r1, [pc, #312]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e36:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4947      	ldr	r1, [pc, #284]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e54:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	493f      	ldr	r1, [pc, #252]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f023 0220 	bic.w	r2, r3, #32
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4938      	ldr	r1, [pc, #224]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e90:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	4930      	ldr	r1, [pc, #192]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eae:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4929      	ldr	r1, [pc, #164]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	4921      	ldr	r1, [pc, #132]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	491a      	ldr	r1, [pc, #104]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f08:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	4912      	ldr	r1, [pc, #72]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	490b      	ldr	r1, [pc, #44]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3748      	adds	r7, #72	; 0x48
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e040      	b.n	8003ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f902 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f82c 	bl	8004000 <UART_SetConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e022      	b.n	8003ff8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f956 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f9dd 	bl	80043b0 <UART_CheckIdleState>
 8003ff6:	4603      	mov	r3, r0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <UART_SetConfig+0x254>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	430b      	orrs	r3, r1
 8004036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a78      	ldr	r2, [pc, #480]	; (8004258 <UART_SetConfig+0x258>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d120      	bne.n	80040be <UART_SetConfig+0xbe>
 800407c:	4b77      	ldr	r3, [pc, #476]	; (800425c <UART_SetConfig+0x25c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d817      	bhi.n	80040b8 <UART_SetConfig+0xb8>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x90>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040b3 	.word	0x080040b3
 800409c:	080040a7 	.word	0x080040a7
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e01d      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e01a      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040ac:	2304      	movs	r3, #4
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e017      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040b2:	2308      	movs	r3, #8
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e014      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e011      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a67      	ldr	r2, [pc, #412]	; (8004260 <UART_SetConfig+0x260>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d102      	bne.n	80040ce <UART_SetConfig+0xce>
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e009      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a64      	ldr	r2, [pc, #400]	; (8004264 <UART_SetConfig+0x264>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d102      	bne.n	80040de <UART_SetConfig+0xde>
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e001      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040de:	2310      	movs	r3, #16
 80040e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d15a      	bne.n	80041a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d827      	bhi.n	8004142 <UART_SetConfig+0x142>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0xf8>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004143 	.word	0x08004143
 8004108:	08004133 	.word	0x08004133
 800410c:	08004143 	.word	0x08004143
 8004110:	08004143 	.word	0x08004143
 8004114:	08004143 	.word	0x08004143
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff fd4c 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004120:	61b8      	str	r0, [r7, #24]
        break;
 8004122:	e013      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff fd6a 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8004128:	61b8      	str	r0, [r7, #24]
        break;
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <UART_SetConfig+0x268>)
 800412e:	61bb      	str	r3, [r7, #24]
        break;
 8004130:	e00c      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7ff fccb 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8004136:	61b8      	str	r0, [r7, #24]
        break;
 8004138:	e008      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	61bb      	str	r3, [r7, #24]
        break;
 8004140:	e004      	b.n	800414c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	77bb      	strb	r3, [r7, #30]
        break;
 800414a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d074      	beq.n	800423c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	005a      	lsls	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d916      	bls.n	800419c <UART_SetConfig+0x19c>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d212      	bcs.n	800419c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f023 030f 	bic.w	r3, r3, #15
 800417e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	b29a      	uxth	r2, r3
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	4313      	orrs	r3, r2
 8004190:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	89fa      	ldrh	r2, [r7, #14]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e04f      	b.n	800423c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	77bb      	strb	r3, [r7, #30]
 80041a0:	e04c      	b.n	800423c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d828      	bhi.n	80041fa <UART_SetConfig+0x1fa>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x1b0>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7ff fcf0 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7ff fd0e 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <UART_SetConfig+0x268>)
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7ff fc6f 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 80041ee:	61b8      	str	r0, [r7, #24]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77bb      	strb	r3, [r7, #30]
        break;
 8004202:	bf00      	nop
    }

    if (pclk != 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085a      	lsrs	r2, r3, #1
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	441a      	add	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d909      	bls.n	8004238 <UART_SetConfig+0x238>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d205      	bcs.n	8004238 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e001      	b.n	800423c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004248:	7fbb      	ldrb	r3, [r7, #30]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	efff69f3 	.word	0xefff69f3
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	007a1200 	.word	0x007a1200

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b098      	sub	sp, #96	; 0x60
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c0:	f7fd f81e 	bl	8001400 <HAL_GetTick>
 80043c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d12e      	bne.n	8004432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f88c 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d021      	beq.n	8004432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004402:	653b      	str	r3, [r7, #80]	; 0x50
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800441a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e062      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d149      	bne.n	80044d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f856 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03c      	beq.n	80044d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	623b      	str	r3, [r7, #32]
   return(result);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
 800447a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800447e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60fb      	str	r3, [r7, #12]
   return(result);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ac:	61fa      	str	r2, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e011      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3758      	adds	r7, #88	; 0x58
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e049      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004518:	d045      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fc ff71 	bl	8001400 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e048      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d031      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b08      	cmp	r3, #8
 800454e:	d110      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2208      	movs	r2, #8
 8004556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f838 	bl	80045ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2208      	movs	r2, #8
 8004562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e029      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004580:	d111      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800458a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f81e 	bl	80045ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e00f      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d0a6      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b095      	sub	sp, #84	; 0x54
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	643b      	str	r3, [r7, #64]	; 0x40
 80045f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e6      	bne.n	80045d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	61fb      	str	r3, [r7, #28]
   return(result);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	2b01      	cmp	r3, #1
 8004642:	d118      	bne.n	8004676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	60bb      	str	r3, [r7, #8]
   return(result);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	647b      	str	r3, [r7, #68]	; 0x44
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	613b      	str	r3, [r7, #16]
   return(result);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e6      	bne.n	8004644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	669a      	str	r2, [r3, #104]	; 0x68
}
 800468a:	bf00      	nop
 800468c:	3754      	adds	r7, #84	; 0x54
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <getTemp>:

char temp[4];

float temp_c;

char* getTemp(void){
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af02      	add	r7, sp, #8
	buf[0] = REG_TEMP;
 800469e:	2200      	movs	r2, #0
 80046a0:	4b37      	ldr	r3, [pc, #220]	; (8004780 <getTemp+0xe8>)
 80046a2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&TMP102_I2C_PORT, TMP102_I2C_ADDR, buf, 1, HAL_MAX_DELAY);
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2301      	movs	r3, #1
 80046ac:	4a34      	ldr	r2, [pc, #208]	; (8004780 <getTemp+0xe8>)
 80046ae:	2190      	movs	r1, #144	; 0x90
 80046b0:	4834      	ldr	r0, [pc, #208]	; (8004784 <getTemp+0xec>)
 80046b2:	f7fd f9d5 	bl	8001a60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&TMP102_I2C_PORT, TMP102_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2302      	movs	r3, #2
 80046be:	4a30      	ldr	r2, [pc, #192]	; (8004780 <getTemp+0xe8>)
 80046c0:	2190      	movs	r1, #144	; 0x90
 80046c2:	4830      	ldr	r0, [pc, #192]	; (8004784 <getTemp+0xec>)
 80046c4:	f7fd fac0 	bl	8001c48 <HAL_I2C_Master_Receive>

	val = ((int16_t)buf[0]<<4 | buf[1]>>4);
 80046c8:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <getTemp+0xe8>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	b21a      	sxth	r2, r3
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <getTemp+0xe8>)
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	b21b      	sxth	r3, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	b21b      	sxth	r3, r3
 80046de:	b29a      	uxth	r2, r3
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <getTemp+0xf0>)
 80046e2:	801a      	strh	r2, [r3, #0]
	if(val > 0x7Ff){
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <getTemp+0xf0>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ec:	d308      	bcc.n	8004700 <getTemp+0x68>
		val |= 0xF000;
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <getTemp+0xf0>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80046f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <getTemp+0xf0>)
 80046fe:	801a      	strh	r2, [r3, #0]
	}

	temp_c = val * 0.0625;
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <getTemp+0xf0>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb ff05 	bl	8000514 <__aeabi_i2d>
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4b1f      	ldr	r3, [pc, #124]	; (800478c <getTemp+0xf4>)
 8004710:	f7fb ff6a 	bl	80005e8 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7fc f976 	bl	8000a0c <__aeabi_d2f>
 8004720:	4603      	mov	r3, r0
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <getTemp+0xf8>)
 8004724:	6013      	str	r3, [r2, #0]

	temp_c *= 100;
 8004726:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <getTemp+0xf8>)
 8004728:	edd3 7a00 	vldr	s15, [r3]
 800472c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004794 <getTemp+0xfc>
 8004730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004734:	4b16      	ldr	r3, [pc, #88]	; (8004790 <getTemp+0xf8>)
 8004736:	edc3 7a00 	vstr	s15, [r3]

	sprintf((char*)buf, "%u.%uC", ((unsigned int)temp_c / 100),((unsigned int)temp_c % 100));
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <getTemp+0xf8>)
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	4b13      	ldr	r3, [pc, #76]	; (8004798 <getTemp+0x100>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095a      	lsrs	r2, r3, #5
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <getTemp+0xf8>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	ee17 1a90 	vmov	r1, s15
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <getTemp+0x100>)
 8004760:	fba3 0301 	umull	r0, r3, r3, r1
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	2064      	movs	r0, #100	; 0x64
 8004768:	fb00 f303 	mul.w	r3, r0, r3
 800476c:	1acb      	subs	r3, r1, r3
 800476e:	490b      	ldr	r1, [pc, #44]	; (800479c <getTemp+0x104>)
 8004770:	4803      	ldr	r0, [pc, #12]	; (8004780 <getTemp+0xe8>)
 8004772:	f000 fa51 	bl	8004c18 <siprintf>

//	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
//	gcvt(temp_c, 3, temp);

	return (char*)buf;
 8004776:	4b02      	ldr	r3, [pc, #8]	; (8004780 <getTemp+0xe8>)
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200001c8 	.word	0x200001c8
 8004784:	20000090 	.word	0x20000090
 8004788:	200001d4 	.word	0x200001d4
 800478c:	3fb00000 	.word	0x3fb00000
 8004790:	200001d8 	.word	0x200001d8
 8004794:	42c80000 	.word	0x42c80000
 8004798:	51eb851f 	.word	0x51eb851f
 800479c:	08005584 	.word	0x08005584

080047a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	2301      	movs	r3, #1
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	2200      	movs	r2, #0
 80047cc:	2178      	movs	r1, #120	; 0x78
 80047ce:	4803      	ldr	r0, [pc, #12]	; (80047dc <ssd1306_WriteCommand+0x2c>)
 80047d0:	f7fd fb30 	bl	8001e34 <HAL_I2C_Mem_Write>
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000090 	.word	0x20000090

080047e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af04      	add	r7, sp, #16
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f2:	9202      	str	r2, [sp, #8]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2301      	movs	r3, #1
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	2178      	movs	r1, #120	; 0x78
 8004800:	4803      	ldr	r0, [pc, #12]	; (8004810 <ssd1306_WriteData+0x30>)
 8004802:	f7fd fb17 	bl	8001e34 <HAL_I2C_Mem_Write>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000090 	.word	0x20000090

08004814 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004818:	f7ff ffc2 	bl	80047a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800481c:	2064      	movs	r0, #100	; 0x64
 800481e:	f7fc fdfb 	bl	8001418 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004822:	2000      	movs	r0, #0
 8004824:	f000 f9da 	bl	8004bdc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004828:	2020      	movs	r0, #32
 800482a:	f7ff ffc1 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800482e:	2000      	movs	r0, #0
 8004830:	f7ff ffbe 	bl	80047b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004834:	20b0      	movs	r0, #176	; 0xb0
 8004836:	f7ff ffbb 	bl	80047b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800483a:	20c8      	movs	r0, #200	; 0xc8
 800483c:	f7ff ffb8 	bl	80047b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004840:	2000      	movs	r0, #0
 8004842:	f7ff ffb5 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004846:	2010      	movs	r0, #16
 8004848:	f7ff ffb2 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800484c:	2040      	movs	r0, #64	; 0x40
 800484e:	f7ff ffaf 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004852:	20ff      	movs	r0, #255	; 0xff
 8004854:	f000 f9ae 	bl	8004bb4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004858:	20a1      	movs	r0, #161	; 0xa1
 800485a:	f7ff ffa9 	bl	80047b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800485e:	20a6      	movs	r0, #166	; 0xa6
 8004860:	f7ff ffa6 	bl	80047b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004864:	20a8      	movs	r0, #168	; 0xa8
 8004866:	f7ff ffa3 	bl	80047b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800486a:	203f      	movs	r0, #63	; 0x3f
 800486c:	f7ff ffa0 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004870:	20a4      	movs	r0, #164	; 0xa4
 8004872:	f7ff ff9d 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004876:	20d3      	movs	r0, #211	; 0xd3
 8004878:	f7ff ff9a 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800487c:	2000      	movs	r0, #0
 800487e:	f7ff ff97 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004882:	20d5      	movs	r0, #213	; 0xd5
 8004884:	f7ff ff94 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004888:	20f0      	movs	r0, #240	; 0xf0
 800488a:	f7ff ff91 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800488e:	20d9      	movs	r0, #217	; 0xd9
 8004890:	f7ff ff8e 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004894:	2022      	movs	r0, #34	; 0x22
 8004896:	f7ff ff8b 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800489a:	20da      	movs	r0, #218	; 0xda
 800489c:	f7ff ff88 	bl	80047b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80048a0:	2012      	movs	r0, #18
 80048a2:	f7ff ff85 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80048a6:	20db      	movs	r0, #219	; 0xdb
 80048a8:	f7ff ff82 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80048ac:	2020      	movs	r0, #32
 80048ae:	f7ff ff7f 	bl	80047b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80048b2:	208d      	movs	r0, #141	; 0x8d
 80048b4:	f7ff ff7c 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80048b8:	2014      	movs	r0, #20
 80048ba:	f7ff ff79 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80048be:	2001      	movs	r0, #1
 80048c0:	f000 f98c 	bl	8004bdc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80048c4:	2000      	movs	r0, #0
 80048c6:	f000 f80f 	bl	80048e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80048ca:	f000 f831 	bl	8004930 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <ssd1306_Init+0xd0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <ssd1306_Init+0xd0>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80048da:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <ssd1306_Init+0xd0>)
 80048dc:	2201      	movs	r2, #1
 80048de:	711a      	strb	r2, [r3, #4]
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200005dc 	.word	0x200005dc

080048e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e00d      	b.n	8004914 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <ssd1306_Fill+0x1a>
 80048fe:	2100      	movs	r1, #0
 8004900:	e000      	b.n	8004904 <ssd1306_Fill+0x1c>
 8004902:	21ff      	movs	r1, #255	; 0xff
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <ssd1306_Fill+0x44>)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	460a      	mov	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d3ed      	bcc.n	80048f8 <ssd1306_Fill+0x10>
    }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	200001dc 	.word	0x200001dc

08004930 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004936:	2300      	movs	r3, #0
 8004938:	71fb      	strb	r3, [r7, #7]
 800493a:	e016      	b.n	800496a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	3b50      	subs	r3, #80	; 0x50
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff34 	bl	80047b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004948:	2000      	movs	r0, #0
 800494a:	f7ff ff31 	bl	80047b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800494e:	2010      	movs	r0, #16
 8004950:	f7ff ff2e 	bl	80047b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	01db      	lsls	r3, r3, #7
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <ssd1306_UpdateScreen+0x4c>)
 800495a:	4413      	add	r3, r2
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff3e 	bl	80047e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	3301      	adds	r3, #1
 8004968:	71fb      	strb	r3, [r7, #7]
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	2b07      	cmp	r3, #7
 800496e:	d9e5      	bls.n	800493c <ssd1306_UpdateScreen+0xc>
    }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200001dc 	.word	0x200001dc

08004980 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	460b      	mov	r3, r1
 800498c:	71bb      	strb	r3, [r7, #6]
 800498e:	4613      	mov	r3, r2
 8004990:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db3d      	blt.n	8004a16 <ssd1306_DrawPixel+0x96>
 800499a:	79bb      	ldrb	r3, [r7, #6]
 800499c:	2b3f      	cmp	r3, #63	; 0x3f
 800499e:	d83a      	bhi.n	8004a16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80049a0:	797b      	ldrb	r3, [r7, #5]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d11a      	bne.n	80049dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80049a6:	79fa      	ldrb	r2, [r7, #7]
 80049a8:	79bb      	ldrb	r3, [r7, #6]
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	b2d8      	uxtb	r0, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	4413      	add	r3, r2
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <ssd1306_DrawPixel+0xa4>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	b25a      	sxtb	r2, r3
 80049ba:	79bb      	ldrb	r3, [r7, #6]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b259      	sxtb	r1, r3
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	4603      	mov	r3, r0
 80049d0:	01db      	lsls	r3, r3, #7
 80049d2:	4413      	add	r3, r2
 80049d4:	b2c9      	uxtb	r1, r1
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <ssd1306_DrawPixel+0xa4>)
 80049d8:	54d1      	strb	r1, [r2, r3]
 80049da:	e01d      	b.n	8004a18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80049dc:	79fa      	ldrb	r2, [r7, #7]
 80049de:	79bb      	ldrb	r3, [r7, #6]
 80049e0:	08db      	lsrs	r3, r3, #3
 80049e2:	b2d8      	uxtb	r0, r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	01db      	lsls	r3, r3, #7
 80049e8:	4413      	add	r3, r2
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <ssd1306_DrawPixel+0xa4>)
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
 80049ee:	b25a      	sxtb	r2, r3
 80049f0:	79bb      	ldrb	r3, [r7, #6]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	b25b      	sxtb	r3, r3
 8004a02:	4013      	ands	r3, r2
 8004a04:	b259      	sxtb	r1, r3
 8004a06:	79fa      	ldrb	r2, [r7, #7]
 8004a08:	4603      	mov	r3, r0
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b2c9      	uxtb	r1, r1
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <ssd1306_DrawPixel+0xa4>)
 8004a12:	54d1      	strb	r1, [r2, r3]
 8004a14:	e000      	b.n	8004a18 <ssd1306_DrawPixel+0x98>
        return;
 8004a16:	bf00      	nop
    }
}
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	200001dc 	.word	0x200001dc

08004a28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b089      	sub	sp, #36	; 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	1d38      	adds	r0, r7, #4
 8004a32:	e880 0006 	stmia.w	r0, {r1, r2}
 8004a36:	461a      	mov	r2, r3
 8004a38:	4623      	mov	r3, r4
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b1f      	cmp	r3, #31
 8004a44:	d902      	bls.n	8004a4c <ssd1306_WriteChar+0x24>
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b7e      	cmp	r3, #126	; 0x7e
 8004a4a:	d901      	bls.n	8004a50 <ssd1306_WriteChar+0x28>
        return 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e06d      	b.n	8004b2c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004a50:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	793b      	ldrb	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	dc06      	bgt.n	8004a6c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004a5e:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004a60:	885b      	ldrh	r3, [r3, #2]
 8004a62:	461a      	mov	r2, r3
 8004a64:	797b      	ldrb	r3, [r7, #5]
 8004a66:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	dd01      	ble.n	8004a70 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e05d      	b.n	8004b2c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e04c      	b.n	8004b10 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	3b20      	subs	r3, #32
 8004a7c:	7979      	ldrb	r1, [r7, #5]
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4619      	mov	r1, r3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	440b      	add	r3, r1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e034      	b.n	8004b00 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d012      	beq.n	8004acc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	b2d8      	uxtb	r0, r3
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004ab6:	885b      	ldrh	r3, [r3, #2]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	7bba      	ldrb	r2, [r7, #14]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f7ff ff5b 	bl	8004980 <ssd1306_DrawPixel>
 8004aca:	e016      	b.n	8004afa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	b2d8      	uxtb	r0, r3
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004adc:	885b      	ldrh	r3, [r3, #2]
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b2d9      	uxtb	r1, r3
 8004ae8:	7bbb      	ldrb	r3, [r7, #14]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	f7ff ff43 	bl	8004980 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	793b      	ldrb	r3, [r7, #4]
 8004b02:	461a      	mov	r2, r3
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d3c5      	bcc.n	8004a96 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	797b      	ldrb	r3, [r7, #5]
 8004b12:	461a      	mov	r2, r3
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d3ad      	bcc.n	8004a76 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	793b      	ldrb	r3, [r7, #4]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <ssd1306_WriteChar+0x10c>)
 8004b28:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3724      	adds	r7, #36	; 0x24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}
 8004b34:	200005dc 	.word	0x200005dc

08004b38 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	1d38      	adds	r0, r7, #4
 8004b42:	e880 0006 	stmia.w	r0, {r1, r2}
 8004b46:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004b48:	e012      	b.n	8004b70 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	7818      	ldrb	r0, [r3, #0]
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	1d3a      	adds	r2, r7, #4
 8004b52:	ca06      	ldmia	r2, {r1, r2}
 8004b54:	f7ff ff68 	bl	8004a28 <ssd1306_WriteChar>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d002      	beq.n	8004b6a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	e008      	b.n	8004b7c <ssd1306_WriteString+0x44>
        }
        str++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e8      	bne.n	8004b4a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	71fb      	strb	r3, [r7, #7]
 8004b90:	4613      	mov	r3, r2
 8004b92:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <ssd1306_SetCursor+0x2c>)
 8004b9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004b9c:	79bb      	ldrb	r3, [r7, #6]
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <ssd1306_SetCursor+0x2c>)
 8004ba2:	805a      	strh	r2, [r3, #2]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	200005dc 	.word	0x200005dc

08004bb4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004bbe:	2381      	movs	r3, #129	; 0x81
 8004bc0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fdf3 	bl	80047b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fdef 	bl	80047b0 <ssd1306_WriteCommand>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004bec:	23af      	movs	r3, #175	; 0xaf
 8004bee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <ssd1306_SetDisplayOn+0x38>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	715a      	strb	r2, [r3, #5]
 8004bf6:	e004      	b.n	8004c02 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004bf8:	23ae      	movs	r3, #174	; 0xae
 8004bfa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <ssd1306_SetDisplayOn+0x38>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fdd3 	bl	80047b0 <ssd1306_WriteCommand>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200005dc 	.word	0x200005dc

08004c18 <siprintf>:
 8004c18:	b40e      	push	{r1, r2, r3}
 8004c1a:	b500      	push	{lr}
 8004c1c:	b09c      	sub	sp, #112	; 0x70
 8004c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c28:	4809      	ldr	r0, [pc, #36]	; (8004c50 <siprintf+0x38>)
 8004c2a:	9107      	str	r1, [sp, #28]
 8004c2c:	9104      	str	r1, [sp, #16]
 8004c2e:	4909      	ldr	r1, [pc, #36]	; (8004c54 <siprintf+0x3c>)
 8004c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	a902      	add	r1, sp, #8
 8004c3c:	f000 f9a0 	bl	8004f80 <_svfiprintf_r>
 8004c40:	9b02      	ldr	r3, [sp, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	b01c      	add	sp, #112	; 0x70
 8004c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c4c:	b003      	add	sp, #12
 8004c4e:	4770      	bx	lr
 8004c50:	20000070 	.word	0x20000070
 8004c54:	ffff0208 	.word	0xffff0208

08004c58 <memset>:
 8004c58:	4402      	add	r2, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <__errno>:
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <__errno+0x8>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000070 	.word	0x20000070

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	4d0d      	ldr	r5, [pc, #52]	; (8004cac <__libc_init_array+0x38>)
 8004c78:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7a:	1b64      	subs	r4, r4, r5
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	2600      	movs	r6, #0
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	4d0b      	ldr	r5, [pc, #44]	; (8004cb4 <__libc_init_array+0x40>)
 8004c86:	4c0c      	ldr	r4, [pc, #48]	; (8004cb8 <__libc_init_array+0x44>)
 8004c88:	f000 fc6a 	bl	8005560 <_init>
 8004c8c:	1b64      	subs	r4, r4, r5
 8004c8e:	10a4      	asrs	r4, r4, #2
 8004c90:	2600      	movs	r6, #0
 8004c92:	42a6      	cmp	r6, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9c:	4798      	blx	r3
 8004c9e:	3601      	adds	r6, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca6:	4798      	blx	r3
 8004ca8:	3601      	adds	r6, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08007b14 	.word	0x08007b14
 8004cb0:	08007b14 	.word	0x08007b14
 8004cb4:	08007b14 	.word	0x08007b14
 8004cb8:	08007b18 	.word	0x08007b18

08004cbc <__retarget_lock_acquire_recursive>:
 8004cbc:	4770      	bx	lr

08004cbe <__retarget_lock_release_recursive>:
 8004cbe:	4770      	bx	lr

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cc8:	d100      	bne.n	8004ccc <memcpy+0xc>
 8004cca:	4770      	bx	lr
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	d1f9      	bne.n	8004cce <memcpy+0xe>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_free_r>:
 8004cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d044      	beq.n	8004d6c <_free_r+0x90>
 8004ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce6:	9001      	str	r0, [sp, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f1a1 0404 	sub.w	r4, r1, #4
 8004cee:	bfb8      	it	lt
 8004cf0:	18e4      	addlt	r4, r4, r3
 8004cf2:	f000 f8df 	bl	8004eb4 <__malloc_lock>
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <_free_r+0x94>)
 8004cf8:	9801      	ldr	r0, [sp, #4]
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	b933      	cbnz	r3, 8004d0c <_free_r+0x30>
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6014      	str	r4, [r2, #0]
 8004d02:	b003      	add	sp, #12
 8004d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d08:	f000 b8da 	b.w	8004ec0 <__malloc_unlock>
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	d908      	bls.n	8004d22 <_free_r+0x46>
 8004d10:	6825      	ldr	r5, [r4, #0]
 8004d12:	1961      	adds	r1, r4, r5
 8004d14:	428b      	cmp	r3, r1
 8004d16:	bf01      	itttt	eq
 8004d18:	6819      	ldreq	r1, [r3, #0]
 8004d1a:	685b      	ldreq	r3, [r3, #4]
 8004d1c:	1949      	addeq	r1, r1, r5
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	e7ed      	b.n	8004cfe <_free_r+0x22>
 8004d22:	461a      	mov	r2, r3
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <_free_r+0x50>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d9fa      	bls.n	8004d22 <_free_r+0x46>
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	1855      	adds	r5, r2, r1
 8004d30:	42a5      	cmp	r5, r4
 8004d32:	d10b      	bne.n	8004d4c <_free_r+0x70>
 8004d34:	6824      	ldr	r4, [r4, #0]
 8004d36:	4421      	add	r1, r4
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	d1e0      	bne.n	8004d02 <_free_r+0x26>
 8004d40:	681c      	ldr	r4, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	6053      	str	r3, [r2, #4]
 8004d46:	440c      	add	r4, r1
 8004d48:	6014      	str	r4, [r2, #0]
 8004d4a:	e7da      	b.n	8004d02 <_free_r+0x26>
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x78>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	e7d6      	b.n	8004d02 <_free_r+0x26>
 8004d54:	6825      	ldr	r5, [r4, #0]
 8004d56:	1961      	adds	r1, r4, r5
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf04      	itt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	bf04      	itt	eq
 8004d64:	1949      	addeq	r1, r1, r5
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	6054      	str	r4, [r2, #4]
 8004d6a:	e7ca      	b.n	8004d02 <_free_r+0x26>
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bd30      	pop	{r4, r5, pc}
 8004d70:	20000724 	.word	0x20000724

08004d74 <sbrk_aligned>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4e0e      	ldr	r6, [pc, #56]	; (8004db0 <sbrk_aligned+0x3c>)
 8004d78:	460c      	mov	r4, r1
 8004d7a:	6831      	ldr	r1, [r6, #0]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b911      	cbnz	r1, 8004d86 <sbrk_aligned+0x12>
 8004d80:	f000 fba6 	bl	80054d0 <_sbrk_r>
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fba1 	bl	80054d0 <_sbrk_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	d00a      	beq.n	8004da8 <sbrk_aligned+0x34>
 8004d92:	1cc4      	adds	r4, r0, #3
 8004d94:	f024 0403 	bic.w	r4, r4, #3
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d007      	beq.n	8004dac <sbrk_aligned+0x38>
 8004d9c:	1a21      	subs	r1, r4, r0
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 fb96 	bl	80054d0 <_sbrk_r>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d101      	bne.n	8004dac <sbrk_aligned+0x38>
 8004da8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dac:	4620      	mov	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	20000728 	.word	0x20000728

08004db4 <_malloc_r>:
 8004db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db8:	1ccd      	adds	r5, r1, #3
 8004dba:	f025 0503 	bic.w	r5, r5, #3
 8004dbe:	3508      	adds	r5, #8
 8004dc0:	2d0c      	cmp	r5, #12
 8004dc2:	bf38      	it	cc
 8004dc4:	250c      	movcc	r5, #12
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	4607      	mov	r7, r0
 8004dca:	db01      	blt.n	8004dd0 <_malloc_r+0x1c>
 8004dcc:	42a9      	cmp	r1, r5
 8004dce:	d905      	bls.n	8004ddc <_malloc_r+0x28>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ddc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004eb0 <_malloc_r+0xfc>
 8004de0:	f000 f868 	bl	8004eb4 <__malloc_lock>
 8004de4:	f8d8 3000 	ldr.w	r3, [r8]
 8004de8:	461c      	mov	r4, r3
 8004dea:	bb5c      	cbnz	r4, 8004e44 <_malloc_r+0x90>
 8004dec:	4629      	mov	r1, r5
 8004dee:	4638      	mov	r0, r7
 8004df0:	f7ff ffc0 	bl	8004d74 <sbrk_aligned>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	4604      	mov	r4, r0
 8004df8:	d155      	bne.n	8004ea6 <_malloc_r+0xf2>
 8004dfa:	f8d8 4000 	ldr.w	r4, [r8]
 8004dfe:	4626      	mov	r6, r4
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	d145      	bne.n	8004e90 <_malloc_r+0xdc>
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d048      	beq.n	8004e9a <_malloc_r+0xe6>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	eb04 0903 	add.w	r9, r4, r3
 8004e12:	f000 fb5d 	bl	80054d0 <_sbrk_r>
 8004e16:	4581      	cmp	r9, r0
 8004e18:	d13f      	bne.n	8004e9a <_malloc_r+0xe6>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffa7 	bl	8004d74 <sbrk_aligned>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d037      	beq.n	8004e9a <_malloc_r+0xe6>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	442b      	add	r3, r5
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	f8d8 3000 	ldr.w	r3, [r8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d038      	beq.n	8004eaa <_malloc_r+0xf6>
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	d12b      	bne.n	8004e96 <_malloc_r+0xe2>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e00f      	b.n	8004e64 <_malloc_r+0xb0>
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	1b52      	subs	r2, r2, r5
 8004e48:	d41f      	bmi.n	8004e8a <_malloc_r+0xd6>
 8004e4a:	2a0b      	cmp	r2, #11
 8004e4c:	d917      	bls.n	8004e7e <_malloc_r+0xca>
 8004e4e:	1961      	adds	r1, r4, r5
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	6025      	str	r5, [r4, #0]
 8004e54:	bf18      	it	ne
 8004e56:	6059      	strne	r1, [r3, #4]
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	bf08      	it	eq
 8004e5c:	f8c8 1000 	streq.w	r1, [r8]
 8004e60:	5162      	str	r2, [r4, r5]
 8004e62:	604b      	str	r3, [r1, #4]
 8004e64:	4638      	mov	r0, r7
 8004e66:	f104 060b 	add.w	r6, r4, #11
 8004e6a:	f000 f829 	bl	8004ec0 <__malloc_unlock>
 8004e6e:	f026 0607 	bic.w	r6, r6, #7
 8004e72:	1d23      	adds	r3, r4, #4
 8004e74:	1af2      	subs	r2, r6, r3
 8004e76:	d0ae      	beq.n	8004dd6 <_malloc_r+0x22>
 8004e78:	1b9b      	subs	r3, r3, r6
 8004e7a:	50a3      	str	r3, [r4, r2]
 8004e7c:	e7ab      	b.n	8004dd6 <_malloc_r+0x22>
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6862      	ldr	r2, [r4, #4]
 8004e82:	d1dd      	bne.n	8004e40 <_malloc_r+0x8c>
 8004e84:	f8c8 2000 	str.w	r2, [r8]
 8004e88:	e7ec      	b.n	8004e64 <_malloc_r+0xb0>
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	6864      	ldr	r4, [r4, #4]
 8004e8e:	e7ac      	b.n	8004dea <_malloc_r+0x36>
 8004e90:	4634      	mov	r4, r6
 8004e92:	6876      	ldr	r6, [r6, #4]
 8004e94:	e7b4      	b.n	8004e00 <_malloc_r+0x4c>
 8004e96:	4613      	mov	r3, r2
 8004e98:	e7cc      	b.n	8004e34 <_malloc_r+0x80>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f000 f80e 	bl	8004ec0 <__malloc_unlock>
 8004ea4:	e797      	b.n	8004dd6 <_malloc_r+0x22>
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	e7dc      	b.n	8004e64 <_malloc_r+0xb0>
 8004eaa:	605b      	str	r3, [r3, #4]
 8004eac:	deff      	udf	#255	; 0xff
 8004eae:	bf00      	nop
 8004eb0:	20000724 	.word	0x20000724

08004eb4 <__malloc_lock>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__malloc_lock+0x8>)
 8004eb6:	f7ff bf01 	b.w	8004cbc <__retarget_lock_acquire_recursive>
 8004eba:	bf00      	nop
 8004ebc:	20000720 	.word	0x20000720

08004ec0 <__malloc_unlock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_unlock+0x8>)
 8004ec2:	f7ff befc 	b.w	8004cbe <__retarget_lock_release_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20000720 	.word	0x20000720

08004ecc <__ssputs_r>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	688e      	ldr	r6, [r1, #8]
 8004ed2:	461f      	mov	r7, r3
 8004ed4:	42be      	cmp	r6, r7
 8004ed6:	680b      	ldr	r3, [r1, #0]
 8004ed8:	4682      	mov	sl, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	4690      	mov	r8, r2
 8004ede:	d82c      	bhi.n	8004f3a <__ssputs_r+0x6e>
 8004ee0:	898a      	ldrh	r2, [r1, #12]
 8004ee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee6:	d026      	beq.n	8004f36 <__ssputs_r+0x6a>
 8004ee8:	6965      	ldr	r5, [r4, #20]
 8004eea:	6909      	ldr	r1, [r1, #16]
 8004eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef0:	eba3 0901 	sub.w	r9, r3, r1
 8004ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ef8:	1c7b      	adds	r3, r7, #1
 8004efa:	444b      	add	r3, r9
 8004efc:	106d      	asrs	r5, r5, #1
 8004efe:	429d      	cmp	r5, r3
 8004f00:	bf38      	it	cc
 8004f02:	461d      	movcc	r5, r3
 8004f04:	0553      	lsls	r3, r2, #21
 8004f06:	d527      	bpl.n	8004f58 <__ssputs_r+0x8c>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7ff ff53 	bl	8004db4 <_malloc_r>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	b360      	cbz	r0, 8004f6c <__ssputs_r+0xa0>
 8004f12:	6921      	ldr	r1, [r4, #16]
 8004f14:	464a      	mov	r2, r9
 8004f16:	f7ff fed3 	bl	8004cc0 <memcpy>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	6126      	str	r6, [r4, #16]
 8004f28:	6165      	str	r5, [r4, #20]
 8004f2a:	444e      	add	r6, r9
 8004f2c:	eba5 0509 	sub.w	r5, r5, r9
 8004f30:	6026      	str	r6, [r4, #0]
 8004f32:	60a5      	str	r5, [r4, #8]
 8004f34:	463e      	mov	r6, r7
 8004f36:	42be      	cmp	r6, r7
 8004f38:	d900      	bls.n	8004f3c <__ssputs_r+0x70>
 8004f3a:	463e      	mov	r6, r7
 8004f3c:	6820      	ldr	r0, [r4, #0]
 8004f3e:	4632      	mov	r2, r6
 8004f40:	4641      	mov	r1, r8
 8004f42:	f000 faab 	bl	800549c <memmove>
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	1b9b      	subs	r3, r3, r6
 8004f4a:	60a3      	str	r3, [r4, #8]
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	4433      	add	r3, r6
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2000      	movs	r0, #0
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	462a      	mov	r2, r5
 8004f5a:	f000 fac9 	bl	80054f0 <_realloc_r>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1e0      	bne.n	8004f26 <__ssputs_r+0x5a>
 8004f64:	6921      	ldr	r1, [r4, #16]
 8004f66:	4650      	mov	r0, sl
 8004f68:	f7ff feb8 	bl	8004cdc <_free_r>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	f8ca 3000 	str.w	r3, [sl]
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7e:	e7e9      	b.n	8004f54 <__ssputs_r+0x88>

08004f80 <_svfiprintf_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	4698      	mov	r8, r3
 8004f86:	898b      	ldrh	r3, [r1, #12]
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	b09d      	sub	sp, #116	; 0x74
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	d50e      	bpl.n	8004fb2 <_svfiprintf_r+0x32>
 8004f94:	690b      	ldr	r3, [r1, #16]
 8004f96:	b963      	cbnz	r3, 8004fb2 <_svfiprintf_r+0x32>
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	f7ff ff0b 	bl	8004db4 <_malloc_r>
 8004f9e:	6028      	str	r0, [r5, #0]
 8004fa0:	6128      	str	r0, [r5, #16]
 8004fa2:	b920      	cbnz	r0, 8004fae <_svfiprintf_r+0x2e>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fac:	e0d0      	b.n	8005150 <_svfiprintf_r+0x1d0>
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	616b      	str	r3, [r5, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005168 <_svfiprintf_r+0x1e8>
 8004fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fca:	f04f 0901 	mov.w	r9, #1
 8004fce:	4623      	mov	r3, r4
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd6:	b10a      	cbz	r2, 8004fdc <_svfiprintf_r+0x5c>
 8004fd8:	2a25      	cmp	r2, #37	; 0x25
 8004fda:	d1f9      	bne.n	8004fd0 <_svfiprintf_r+0x50>
 8004fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe0:	d00b      	beq.n	8004ffa <_svfiprintf_r+0x7a>
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7ff ff6f 	bl	8004ecc <__ssputs_r>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f000 80a9 	beq.w	8005146 <_svfiprintf_r+0x1c6>
 8004ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff6:	445a      	add	r2, fp
 8004ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80a1 	beq.w	8005146 <_svfiprintf_r+0x1c6>
 8005004:	2300      	movs	r3, #0
 8005006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800500a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800500e:	f10a 0a01 	add.w	sl, sl, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800501a:	931a      	str	r3, [sp, #104]	; 0x68
 800501c:	4654      	mov	r4, sl
 800501e:	2205      	movs	r2, #5
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	4850      	ldr	r0, [pc, #320]	; (8005168 <_svfiprintf_r+0x1e8>)
 8005026:	f7fb f8d3 	bl	80001d0 <memchr>
 800502a:	9a04      	ldr	r2, [sp, #16]
 800502c:	b9d8      	cbnz	r0, 8005066 <_svfiprintf_r+0xe6>
 800502e:	06d0      	lsls	r0, r2, #27
 8005030:	bf44      	itt	mi
 8005032:	2320      	movmi	r3, #32
 8005034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005038:	0711      	lsls	r1, r2, #28
 800503a:	bf44      	itt	mi
 800503c:	232b      	movmi	r3, #43	; 0x2b
 800503e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b2a      	cmp	r3, #42	; 0x2a
 8005048:	d015      	beq.n	8005076 <_svfiprintf_r+0xf6>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	4654      	mov	r4, sl
 800504e:	2000      	movs	r0, #0
 8005050:	f04f 0c0a 	mov.w	ip, #10
 8005054:	4621      	mov	r1, r4
 8005056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505a:	3b30      	subs	r3, #48	; 0x30
 800505c:	2b09      	cmp	r3, #9
 800505e:	d94d      	bls.n	80050fc <_svfiprintf_r+0x17c>
 8005060:	b1b0      	cbz	r0, 8005090 <_svfiprintf_r+0x110>
 8005062:	9207      	str	r2, [sp, #28]
 8005064:	e014      	b.n	8005090 <_svfiprintf_r+0x110>
 8005066:	eba0 0308 	sub.w	r3, r0, r8
 800506a:	fa09 f303 	lsl.w	r3, r9, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	46a2      	mov	sl, r4
 8005074:	e7d2      	b.n	800501c <_svfiprintf_r+0x9c>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	9103      	str	r1, [sp, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	bfbb      	ittet	lt
 8005082:	425b      	neglt	r3, r3
 8005084:	f042 0202 	orrlt.w	r2, r2, #2
 8005088:	9307      	strge	r3, [sp, #28]
 800508a:	9307      	strlt	r3, [sp, #28]
 800508c:	bfb8      	it	lt
 800508e:	9204      	strlt	r2, [sp, #16]
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	2b2e      	cmp	r3, #46	; 0x2e
 8005094:	d10c      	bne.n	80050b0 <_svfiprintf_r+0x130>
 8005096:	7863      	ldrb	r3, [r4, #1]
 8005098:	2b2a      	cmp	r3, #42	; 0x2a
 800509a:	d134      	bne.n	8005106 <_svfiprintf_r+0x186>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	9203      	str	r2, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bfb8      	it	lt
 80050a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050ac:	3402      	adds	r4, #2
 80050ae:	9305      	str	r3, [sp, #20]
 80050b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005178 <_svfiprintf_r+0x1f8>
 80050b4:	7821      	ldrb	r1, [r4, #0]
 80050b6:	2203      	movs	r2, #3
 80050b8:	4650      	mov	r0, sl
 80050ba:	f7fb f889 	bl	80001d0 <memchr>
 80050be:	b138      	cbz	r0, 80050d0 <_svfiprintf_r+0x150>
 80050c0:	9b04      	ldr	r3, [sp, #16]
 80050c2:	eba0 000a 	sub.w	r0, r0, sl
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	4082      	lsls	r2, r0
 80050ca:	4313      	orrs	r3, r2
 80050cc:	3401      	adds	r4, #1
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d4:	4825      	ldr	r0, [pc, #148]	; (800516c <_svfiprintf_r+0x1ec>)
 80050d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050da:	2206      	movs	r2, #6
 80050dc:	f7fb f878 	bl	80001d0 <memchr>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d038      	beq.n	8005156 <_svfiprintf_r+0x1d6>
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <_svfiprintf_r+0x1f0>)
 80050e6:	bb1b      	cbnz	r3, 8005130 <_svfiprintf_r+0x1b0>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	3307      	adds	r3, #7
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	3308      	adds	r3, #8
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	4433      	add	r3, r6
 80050f8:	9309      	str	r3, [sp, #36]	; 0x24
 80050fa:	e768      	b.n	8004fce <_svfiprintf_r+0x4e>
 80050fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005100:	460c      	mov	r4, r1
 8005102:	2001      	movs	r0, #1
 8005104:	e7a6      	b.n	8005054 <_svfiprintf_r+0xd4>
 8005106:	2300      	movs	r3, #0
 8005108:	3401      	adds	r4, #1
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	4619      	mov	r1, r3
 800510e:	f04f 0c0a 	mov.w	ip, #10
 8005112:	4620      	mov	r0, r4
 8005114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005118:	3a30      	subs	r2, #48	; 0x30
 800511a:	2a09      	cmp	r2, #9
 800511c:	d903      	bls.n	8005126 <_svfiprintf_r+0x1a6>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0c6      	beq.n	80050b0 <_svfiprintf_r+0x130>
 8005122:	9105      	str	r1, [sp, #20]
 8005124:	e7c4      	b.n	80050b0 <_svfiprintf_r+0x130>
 8005126:	fb0c 2101 	mla	r1, ip, r1, r2
 800512a:	4604      	mov	r4, r0
 800512c:	2301      	movs	r3, #1
 800512e:	e7f0      	b.n	8005112 <_svfiprintf_r+0x192>
 8005130:	ab03      	add	r3, sp, #12
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	462a      	mov	r2, r5
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <_svfiprintf_r+0x1f4>)
 8005138:	a904      	add	r1, sp, #16
 800513a:	4638      	mov	r0, r7
 800513c:	f3af 8000 	nop.w
 8005140:	1c42      	adds	r2, r0, #1
 8005142:	4606      	mov	r6, r0
 8005144:	d1d6      	bne.n	80050f4 <_svfiprintf_r+0x174>
 8005146:	89ab      	ldrh	r3, [r5, #12]
 8005148:	065b      	lsls	r3, r3, #25
 800514a:	f53f af2d 	bmi.w	8004fa8 <_svfiprintf_r+0x28>
 800514e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005150:	b01d      	add	sp, #116	; 0x74
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	ab03      	add	r3, sp, #12
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	462a      	mov	r2, r5
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <_svfiprintf_r+0x1f4>)
 800515e:	a904      	add	r1, sp, #16
 8005160:	4638      	mov	r0, r7
 8005162:	f000 f879 	bl	8005258 <_printf_i>
 8005166:	e7eb      	b.n	8005140 <_svfiprintf_r+0x1c0>
 8005168:	08007ae0 	.word	0x08007ae0
 800516c:	08007aea 	.word	0x08007aea
 8005170:	00000000 	.word	0x00000000
 8005174:	08004ecd 	.word	0x08004ecd
 8005178:	08007ae6 	.word	0x08007ae6

0800517c <_printf_common>:
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4616      	mov	r6, r2
 8005182:	4699      	mov	r9, r3
 8005184:	688a      	ldr	r2, [r1, #8]
 8005186:	690b      	ldr	r3, [r1, #16]
 8005188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800518c:	4293      	cmp	r3, r2
 800518e:	bfb8      	it	lt
 8005190:	4613      	movlt	r3, r2
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005198:	4607      	mov	r7, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b10a      	cbz	r2, 80051a2 <_printf_common+0x26>
 800519e:	3301      	adds	r3, #1
 80051a0:	6033      	str	r3, [r6, #0]
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	0699      	lsls	r1, r3, #26
 80051a6:	bf42      	ittt	mi
 80051a8:	6833      	ldrmi	r3, [r6, #0]
 80051aa:	3302      	addmi	r3, #2
 80051ac:	6033      	strmi	r3, [r6, #0]
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	f015 0506 	ands.w	r5, r5, #6
 80051b4:	d106      	bne.n	80051c4 <_printf_common+0x48>
 80051b6:	f104 0a19 	add.w	sl, r4, #25
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	6832      	ldr	r2, [r6, #0]
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	dc26      	bgt.n	8005212 <_printf_common+0x96>
 80051c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c8:	1e13      	subs	r3, r2, #0
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	bf18      	it	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	0692      	lsls	r2, r2, #26
 80051d2:	d42b      	bmi.n	800522c <_printf_common+0xb0>
 80051d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d8:	4649      	mov	r1, r9
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	3001      	adds	r0, #1
 80051e0:	d01e      	beq.n	8005220 <_printf_common+0xa4>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	bf02      	ittt	eq
 80051ee:	68e5      	ldreq	r5, [r4, #12]
 80051f0:	6833      	ldreq	r3, [r6, #0]
 80051f2:	1aed      	subeq	r5, r5, r3
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	bf0c      	ite	eq
 80051f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051fc:	2500      	movne	r5, #0
 80051fe:	4293      	cmp	r3, r2
 8005200:	bfc4      	itt	gt
 8005202:	1a9b      	subgt	r3, r3, r2
 8005204:	18ed      	addgt	r5, r5, r3
 8005206:	2600      	movs	r6, #0
 8005208:	341a      	adds	r4, #26
 800520a:	42b5      	cmp	r5, r6
 800520c:	d11a      	bne.n	8005244 <_printf_common+0xc8>
 800520e:	2000      	movs	r0, #0
 8005210:	e008      	b.n	8005224 <_printf_common+0xa8>
 8005212:	2301      	movs	r3, #1
 8005214:	4652      	mov	r2, sl
 8005216:	4649      	mov	r1, r9
 8005218:	4638      	mov	r0, r7
 800521a:	47c0      	blx	r8
 800521c:	3001      	adds	r0, #1
 800521e:	d103      	bne.n	8005228 <_printf_common+0xac>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	3501      	adds	r5, #1
 800522a:	e7c6      	b.n	80051ba <_printf_common+0x3e>
 800522c:	18e1      	adds	r1, r4, r3
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	2030      	movs	r0, #48	; 0x30
 8005232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005236:	4422      	add	r2, r4
 8005238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800523c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005240:	3302      	adds	r3, #2
 8005242:	e7c7      	b.n	80051d4 <_printf_common+0x58>
 8005244:	2301      	movs	r3, #1
 8005246:	4622      	mov	r2, r4
 8005248:	4649      	mov	r1, r9
 800524a:	4638      	mov	r0, r7
 800524c:	47c0      	blx	r8
 800524e:	3001      	adds	r0, #1
 8005250:	d0e6      	beq.n	8005220 <_printf_common+0xa4>
 8005252:	3601      	adds	r6, #1
 8005254:	e7d9      	b.n	800520a <_printf_common+0x8e>
	...

08005258 <_printf_i>:
 8005258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	7e0f      	ldrb	r7, [r1, #24]
 800525e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005260:	2f78      	cmp	r7, #120	; 0x78
 8005262:	4691      	mov	r9, r2
 8005264:	4680      	mov	r8, r0
 8005266:	460c      	mov	r4, r1
 8005268:	469a      	mov	sl, r3
 800526a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800526e:	d807      	bhi.n	8005280 <_printf_i+0x28>
 8005270:	2f62      	cmp	r7, #98	; 0x62
 8005272:	d80a      	bhi.n	800528a <_printf_i+0x32>
 8005274:	2f00      	cmp	r7, #0
 8005276:	f000 80d4 	beq.w	8005422 <_printf_i+0x1ca>
 800527a:	2f58      	cmp	r7, #88	; 0x58
 800527c:	f000 80c0 	beq.w	8005400 <_printf_i+0x1a8>
 8005280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005288:	e03a      	b.n	8005300 <_printf_i+0xa8>
 800528a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528e:	2b15      	cmp	r3, #21
 8005290:	d8f6      	bhi.n	8005280 <_printf_i+0x28>
 8005292:	a101      	add	r1, pc, #4	; (adr r1, 8005298 <_printf_i+0x40>)
 8005294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005298:	080052f1 	.word	0x080052f1
 800529c:	08005305 	.word	0x08005305
 80052a0:	08005281 	.word	0x08005281
 80052a4:	08005281 	.word	0x08005281
 80052a8:	08005281 	.word	0x08005281
 80052ac:	08005281 	.word	0x08005281
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005281 	.word	0x08005281
 80052b8:	08005281 	.word	0x08005281
 80052bc:	08005281 	.word	0x08005281
 80052c0:	08005281 	.word	0x08005281
 80052c4:	08005409 	.word	0x08005409
 80052c8:	08005331 	.word	0x08005331
 80052cc:	080053c3 	.word	0x080053c3
 80052d0:	08005281 	.word	0x08005281
 80052d4:	08005281 	.word	0x08005281
 80052d8:	0800542b 	.word	0x0800542b
 80052dc:	08005281 	.word	0x08005281
 80052e0:	08005331 	.word	0x08005331
 80052e4:	08005281 	.word	0x08005281
 80052e8:	08005281 	.word	0x08005281
 80052ec:	080053cb 	.word	0x080053cb
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005300:	2301      	movs	r3, #1
 8005302:	e09f      	b.n	8005444 <_printf_i+0x1ec>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	0607      	lsls	r7, r0, #24
 800530a:	f103 0104 	add.w	r1, r3, #4
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0xbe>
 8005312:	681e      	ldr	r6, [r3, #0]
 8005314:	e003      	b.n	800531e <_printf_i+0xc6>
 8005316:	0646      	lsls	r6, r0, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0xba>
 800531a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800531e:	2e00      	cmp	r6, #0
 8005320:	da03      	bge.n	800532a <_printf_i+0xd2>
 8005322:	232d      	movs	r3, #45	; 0x2d
 8005324:	4276      	negs	r6, r6
 8005326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532a:	485a      	ldr	r0, [pc, #360]	; (8005494 <_printf_i+0x23c>)
 800532c:	230a      	movs	r3, #10
 800532e:	e012      	b.n	8005356 <_printf_i+0xfe>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	6029      	str	r1, [r5, #0]
 8005338:	0605      	lsls	r5, r0, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0xe8>
 800533c:	681e      	ldr	r6, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0xee>
 8005340:	0641      	lsls	r1, r0, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0xe4>
 8005344:	881e      	ldrh	r6, [r3, #0]
 8005346:	4853      	ldr	r0, [pc, #332]	; (8005494 <_printf_i+0x23c>)
 8005348:	2f6f      	cmp	r7, #111	; 0x6f
 800534a:	bf0c      	ite	eq
 800534c:	2308      	moveq	r3, #8
 800534e:	230a      	movne	r3, #10
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005356:	6865      	ldr	r5, [r4, #4]
 8005358:	60a5      	str	r5, [r4, #8]
 800535a:	2d00      	cmp	r5, #0
 800535c:	bfa2      	ittt	ge
 800535e:	6821      	ldrge	r1, [r4, #0]
 8005360:	f021 0104 	bicge.w	r1, r1, #4
 8005364:	6021      	strge	r1, [r4, #0]
 8005366:	b90e      	cbnz	r6, 800536c <_printf_i+0x114>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d04b      	beq.n	8005404 <_printf_i+0x1ac>
 800536c:	4615      	mov	r5, r2
 800536e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005372:	fb03 6711 	mls	r7, r3, r1, r6
 8005376:	5dc7      	ldrb	r7, [r0, r7]
 8005378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800537c:	4637      	mov	r7, r6
 800537e:	42bb      	cmp	r3, r7
 8005380:	460e      	mov	r6, r1
 8005382:	d9f4      	bls.n	800536e <_printf_i+0x116>
 8005384:	2b08      	cmp	r3, #8
 8005386:	d10b      	bne.n	80053a0 <_printf_i+0x148>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07de      	lsls	r6, r3, #31
 800538c:	d508      	bpl.n	80053a0 <_printf_i+0x148>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6861      	ldr	r1, [r4, #4]
 8005392:	4299      	cmp	r1, r3
 8005394:	bfde      	ittt	le
 8005396:	2330      	movle	r3, #48	; 0x30
 8005398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800539c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053a0:	1b52      	subs	r2, r2, r5
 80053a2:	6122      	str	r2, [r4, #16]
 80053a4:	f8cd a000 	str.w	sl, [sp]
 80053a8:	464b      	mov	r3, r9
 80053aa:	aa03      	add	r2, sp, #12
 80053ac:	4621      	mov	r1, r4
 80053ae:	4640      	mov	r0, r8
 80053b0:	f7ff fee4 	bl	800517c <_printf_common>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d14a      	bne.n	800544e <_printf_i+0x1f6>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053bc:	b004      	add	sp, #16
 80053be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f043 0320 	orr.w	r3, r3, #32
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	4833      	ldr	r0, [pc, #204]	; (8005498 <_printf_i+0x240>)
 80053cc:	2778      	movs	r7, #120	; 0x78
 80053ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6829      	ldr	r1, [r5, #0]
 80053d6:	061f      	lsls	r7, r3, #24
 80053d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053dc:	d402      	bmi.n	80053e4 <_printf_i+0x18c>
 80053de:	065f      	lsls	r7, r3, #25
 80053e0:	bf48      	it	mi
 80053e2:	b2b6      	uxthmi	r6, r6
 80053e4:	07df      	lsls	r7, r3, #31
 80053e6:	bf48      	it	mi
 80053e8:	f043 0320 	orrmi.w	r3, r3, #32
 80053ec:	6029      	str	r1, [r5, #0]
 80053ee:	bf48      	it	mi
 80053f0:	6023      	strmi	r3, [r4, #0]
 80053f2:	b91e      	cbnz	r6, 80053fc <_printf_i+0x1a4>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2310      	movs	r3, #16
 80053fe:	e7a7      	b.n	8005350 <_printf_i+0xf8>
 8005400:	4824      	ldr	r0, [pc, #144]	; (8005494 <_printf_i+0x23c>)
 8005402:	e7e4      	b.n	80053ce <_printf_i+0x176>
 8005404:	4615      	mov	r5, r2
 8005406:	e7bd      	b.n	8005384 <_printf_i+0x12c>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6826      	ldr	r6, [r4, #0]
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	1d18      	adds	r0, r3, #4
 8005410:	6028      	str	r0, [r5, #0]
 8005412:	0635      	lsls	r5, r6, #24
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	d501      	bpl.n	800541c <_printf_i+0x1c4>
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0x1ca>
 800541c:	0670      	lsls	r0, r6, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0x1c0>
 8005420:	8019      	strh	r1, [r3, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	4615      	mov	r5, r2
 8005428:	e7bc      	b.n	80053a4 <_printf_i+0x14c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	2100      	movs	r1, #0
 8005436:	4628      	mov	r0, r5
 8005438:	f7fa feca 	bl	80001d0 <memchr>
 800543c:	b108      	cbz	r0, 8005442 <_printf_i+0x1ea>
 800543e:	1b40      	subs	r0, r0, r5
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	2300      	movs	r3, #0
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	e7aa      	b.n	80053a4 <_printf_i+0x14c>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	462a      	mov	r2, r5
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d0ad      	beq.n	80053b8 <_printf_i+0x160>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	d413      	bmi.n	800548a <_printf_i+0x232>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e7a6      	b.n	80053bc <_printf_i+0x164>
 800546e:	2301      	movs	r3, #1
 8005470:	4632      	mov	r2, r6
 8005472:	4649      	mov	r1, r9
 8005474:	4640      	mov	r0, r8
 8005476:	47d0      	blx	sl
 8005478:	3001      	adds	r0, #1
 800547a:	d09d      	beq.n	80053b8 <_printf_i+0x160>
 800547c:	3501      	adds	r5, #1
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	9903      	ldr	r1, [sp, #12]
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	42ab      	cmp	r3, r5
 8005486:	dcf2      	bgt.n	800546e <_printf_i+0x216>
 8005488:	e7eb      	b.n	8005462 <_printf_i+0x20a>
 800548a:	2500      	movs	r5, #0
 800548c:	f104 0619 	add.w	r6, r4, #25
 8005490:	e7f5      	b.n	800547e <_printf_i+0x226>
 8005492:	bf00      	nop
 8005494:	08007af1 	.word	0x08007af1
 8005498:	08007b02 	.word	0x08007b02

0800549c <memmove>:
 800549c:	4288      	cmp	r0, r1
 800549e:	b510      	push	{r4, lr}
 80054a0:	eb01 0402 	add.w	r4, r1, r2
 80054a4:	d902      	bls.n	80054ac <memmove+0x10>
 80054a6:	4284      	cmp	r4, r0
 80054a8:	4623      	mov	r3, r4
 80054aa:	d807      	bhi.n	80054bc <memmove+0x20>
 80054ac:	1e43      	subs	r3, r0, #1
 80054ae:	42a1      	cmp	r1, r4
 80054b0:	d008      	beq.n	80054c4 <memmove+0x28>
 80054b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ba:	e7f8      	b.n	80054ae <memmove+0x12>
 80054bc:	4402      	add	r2, r0
 80054be:	4601      	mov	r1, r0
 80054c0:	428a      	cmp	r2, r1
 80054c2:	d100      	bne.n	80054c6 <memmove+0x2a>
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ce:	e7f7      	b.n	80054c0 <memmove+0x24>

080054d0 <_sbrk_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d06      	ldr	r5, [pc, #24]	; (80054ec <_sbrk_r+0x1c>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f7fb fec4 	bl	8001268 <_sbrk>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_sbrk_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_sbrk_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	2000071c 	.word	0x2000071c

080054f0 <_realloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	4680      	mov	r8, r0
 80054f6:	4614      	mov	r4, r2
 80054f8:	460e      	mov	r6, r1
 80054fa:	b921      	cbnz	r1, 8005506 <_realloc_r+0x16>
 80054fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005500:	4611      	mov	r1, r2
 8005502:	f7ff bc57 	b.w	8004db4 <_malloc_r>
 8005506:	b92a      	cbnz	r2, 8005514 <_realloc_r+0x24>
 8005508:	f7ff fbe8 	bl	8004cdc <_free_r>
 800550c:	4625      	mov	r5, r4
 800550e:	4628      	mov	r0, r5
 8005510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005514:	f000 f81b 	bl	800554e <_malloc_usable_size_r>
 8005518:	4284      	cmp	r4, r0
 800551a:	4607      	mov	r7, r0
 800551c:	d802      	bhi.n	8005524 <_realloc_r+0x34>
 800551e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005522:	d812      	bhi.n	800554a <_realloc_r+0x5a>
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f7ff fc44 	bl	8004db4 <_malloc_r>
 800552c:	4605      	mov	r5, r0
 800552e:	2800      	cmp	r0, #0
 8005530:	d0ed      	beq.n	800550e <_realloc_r+0x1e>
 8005532:	42bc      	cmp	r4, r7
 8005534:	4622      	mov	r2, r4
 8005536:	4631      	mov	r1, r6
 8005538:	bf28      	it	cs
 800553a:	463a      	movcs	r2, r7
 800553c:	f7ff fbc0 	bl	8004cc0 <memcpy>
 8005540:	4631      	mov	r1, r6
 8005542:	4640      	mov	r0, r8
 8005544:	f7ff fbca 	bl	8004cdc <_free_r>
 8005548:	e7e1      	b.n	800550e <_realloc_r+0x1e>
 800554a:	4635      	mov	r5, r6
 800554c:	e7df      	b.n	800550e <_realloc_r+0x1e>

0800554e <_malloc_usable_size_r>:
 800554e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005552:	1f18      	subs	r0, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	bfbc      	itt	lt
 8005558:	580b      	ldrlt	r3, [r1, r0]
 800555a:	18c0      	addlt	r0, r0, r3
 800555c:	4770      	bx	lr
	...

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
