
SPI_ssd1309.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c4  080034c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034c4  080034c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c4  080034c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  080034d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080034d8  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af17  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001838  00000000  00000000  0002af96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d8  00000000  00000000  0002d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a921  00000000  00000000  0002d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af2f  00000000  00000000  000480a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e471  00000000  00000000  00052fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f4  00000000  00000000  000f1444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f3838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003474 	.word	0x08003474

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003474 	.word	0x08003474

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa55 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f813 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8c1 	bl	800035c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f88f 	bl	80002fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80001de:	f000 f84f 	bl	8000280 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80001e2:	f002 ff3d 	bl	8003060 <ssd1306_Init>
  ssd1306_DrawRectangle(19, 10, 40, 40, White);
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2328      	movs	r3, #40	; 0x28
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	210a      	movs	r1, #10
 80001f0:	2013      	movs	r0, #19
 80001f2:	f003 f8ab 	bl	800334c <ssd1306_DrawRectangle>
  ssd1306_UpdateScreen();
 80001f6:	f002 ffc1 	bl	800317c <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x32>

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 f906 	bl	800341c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000232:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fd17 	bl	8000c70 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000248:	f000 f902 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fd40 	bl	8001cec <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000272:	f000 f8ed 	bl	8000450 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <MX_SPI2_Init+0x74>)
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <MX_SPI2_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <MX_SPI2_Init+0x74>)
 800028c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <MX_SPI2_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <MX_SPI2_Init+0x74>)
 800029a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800029e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a6:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002ce:	2207      	movs	r2, #7
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_SPI2_Init+0x74>)
 80002e0:	f001 ff3a 	bl	8002158 <HAL_SPI_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80002ea:	f000 f8b1 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028
 80002f8:	40003800 	.word	0x40003800

080002fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000302:	4a15      	ldr	r2, [pc, #84]	; (8000358 <MX_USART2_UART_Init+0x5c>)
 8000304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000308:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800030c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000322:	220c      	movs	r2, #12
 8000324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART2_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART2_UART_Init+0x58>)
 8000340:	f002 fa8e 	bl	8002860 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034a:	f000 f881 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000008c 	.word	0x2000008c
 8000358:	40004400 	.word	0x40004400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	4b34      	ldr	r3, [pc, #208]	; (8000444 <MX_GPIO_Init+0xe8>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a33      	ldr	r2, [pc, #204]	; (8000444 <MX_GPIO_Init+0xe8>)
 8000378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <MX_GPIO_Init+0xe8>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_GPIO_Init+0xe8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a2d      	ldr	r2, [pc, #180]	; (8000444 <MX_GPIO_Init+0xe8>)
 8000390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <MX_GPIO_Init+0xe8>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a27      	ldr	r2, [pc, #156]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a21      	ldr	r2, [pc, #132]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f244 0160 	movw	r1, #16480	; 0x4060
 80003d8:	481b      	ldr	r0, [pc, #108]	; (8000448 <MX_GPIO_Init+0xec>)
 80003da:	f000 fc31 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <MX_GPIO_Init+0xf0>)
 80003f6:	f000 fab1 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000400:	2302      	movs	r3, #2
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800040c:	2307      	movs	r3, #7
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4619      	mov	r1, r3
 8000416:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_GPIO_Init+0xec>)
 8000418:	f000 faa0 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6;
 800041c:	f244 0360 	movw	r3, #16480	; 0x4060
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0xec>)
 8000436:	f000 fa91 	bl	800095c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	3728      	adds	r7, #40	; 0x28
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400
 800044c:	48000800 	.word	0x48000800

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000492:	2007      	movs	r0, #7
 8000494:	f000 fa2e 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <HAL_SPI_MspInit+0x7c>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d128      	bne.n	8000518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a16      	ldr	r2, [pc, #88]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a10      	ldr	r2, [pc, #64]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_SPI_MspInit+0x80>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000508:	2305      	movs	r3, #5
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_SPI_MspInit+0x84>)
 8000514:	f000 fa22 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40003800 	.word	0x40003800
 8000524:	40021000 	.word	0x40021000
 8000528:	48000400 	.word	0x48000400

0800052c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_UART_MspInit+0x7c>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d128      	bne.n	80005a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_UART_MspInit+0x80>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_UART_MspInit+0x80>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_UART_MspInit+0x80>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_UART_MspInit+0x80>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <HAL_UART_MspInit+0x80>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_UART_MspInit+0x80>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800057e:	230c      	movs	r3, #12
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800058e:	2307      	movs	r3, #7
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 f9de 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3728      	adds	r7, #40	; 0x28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40004400 	.word	0x40004400
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f884 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000660 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800062c:	f7ff ffea 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f002 fee9 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800065a:	f7ff fdb5 	bl	80001c8 <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000660:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800066c:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 8000670:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000674:	20000520 	.word	0x20000520

08000678 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_IRQHandler>
	...

0800067c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f931 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff fee0 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f93b 	bl	8000942 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e4:	f000 f911 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x20>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x24>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_IncTick+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	20000114 	.word	0x20000114

08000730 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;  
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000114 	.word	0x20000114

08000748 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff ffee 	bl	8000730 <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_Delay+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800076e:	bf00      	nop
 8000770:	f7ff ffde 	bl	8000730 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff47 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff5c 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffb0 	bl	80008b0 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e14e      	b.n	8000c0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8140 	beq.w	8000c04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b01      	cmp	r3, #1
 800098e:	d005      	beq.n	800099c <HAL_GPIO_Init+0x40>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d130      	bne.n	80009fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 0201 	and.w	r2, r3, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d017      	beq.n	8000a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d123      	bne.n	8000a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	6939      	ldr	r1, [r7, #16]
 8000a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 0203 	and.w	r2, r3, #3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 809a 	beq.w	8000c04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	4b55      	ldr	r3, [pc, #340]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a54      	ldr	r2, [pc, #336]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae8:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b12:	d013      	beq.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a46      	ldr	r2, [pc, #280]	; (8000c30 <HAL_GPIO_Init+0x2d4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d00d      	beq.n	8000b38 <HAL_GPIO_Init+0x1dc>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a45      	ldr	r2, [pc, #276]	; (8000c34 <HAL_GPIO_Init+0x2d8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x1d8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <HAL_GPIO_Init+0x2dc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_GPIO_Init+0x1d4>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b30:	2305      	movs	r3, #5
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4e:	4937      	ldr	r1, [pc, #220]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000baa:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f47f aea9 	bne.w	800096c <HAL_GPIO_Init+0x10>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	787b      	ldrb	r3, [r7, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f001 b823 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 817d 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cac:	4bbc      	ldr	r3, [pc, #752]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d00c      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb8:	4bb9      	ldr	r3, [pc, #740]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d15c      	bne.n	8000d7e <HAL_RCC_OscConfig+0x10e>
 8000cc4:	4bb6      	ldr	r3, [pc, #728]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d155      	bne.n	8000d7e <HAL_RCC_OscConfig+0x10e>
 8000cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d102      	bne.n	8000d04 <HAL_RCC_OscConfig+0x94>
 8000cfe:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	e015      	b.n	8000d30 <HAL_RCC_OscConfig+0xc0>
 8000d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d2c:	4b9c      	ldr	r3, [pc, #624]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d3c:	fa92 f2a2 	rbit	r2, r2
 8000d40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	f042 0220 	orr.w	r2, r2, #32
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 811f 	beq.w	8000fa4 <HAL_RCC_OscConfig+0x334>
 8000d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8116 	bne.w	8000fa4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f000 bfaf 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8e:	d106      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12e>
 8000d90:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a82      	ldr	r2, [pc, #520]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e036      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x158>
 8000dae:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7b      	ldr	r2, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e021      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x184>
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000df4:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a66      	ldr	r2, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e0c:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	f023 020f 	bic.w	r2, r3, #15
 8000e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	495f      	ldr	r1, [pc, #380]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d059      	beq.n	8000eea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fc7b 	bl	8000730 <HAL_GetTick>
 8000e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e00a      	b.n	8000e56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc76 	bl	8000730 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b64      	cmp	r3, #100	; 0x64
 8000e4e:	d902      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f000 bf43 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8000e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <HAL_RCC_OscConfig+0x218>
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	e015      	b.n	8000eb4 <HAL_RCC_OscConfig+0x244>
 8000e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ea4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ebc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ec0:	fa92 f2a2 	rbit	r2, r2
 8000ec4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ec8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ecc:	fab2 f282 	clz	r2, r2
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	f042 0220 	orr.w	r2, r2, #32
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	f002 021f 	and.w	r2, r2, #31
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ab      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1d0>
 8000ee8:	e05d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc21 	bl	8000730 <HAL_GetTick>
 8000eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e00a      	b.n	8000f0a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc1c 	bl	8000730 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d902      	bls.n	8000f0a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f000 bee9 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8000f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d102      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2cc>
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e015      	b.n	8000f68 <HAL_RCC_OscConfig+0x2f8>
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f54:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f58:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f70:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f74:	fa92 f2a2 	rbit	r2, r2
 8000f78:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f7c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f80:	fab2 f282 	clz	r2, r2
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f042 0220 	orr.w	r2, r2, #32
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f002 021f 	and.w	r2, r2, #31
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ab      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x284>
 8000f9c:	e003      	b.n	8000fa6 <HAL_RCC_OscConfig+0x336>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 817d 	beq.w	80012b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fbc:	4ba6      	ldr	r3, [pc, #664]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc8:	4ba3      	ldr	r3, [pc, #652]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d172      	bne.n	80010ba <HAL_RCC_OscConfig+0x44a>
 8000fd4:	4ba0      	ldr	r3, [pc, #640]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d16c      	bne.n	80010ba <HAL_RCC_OscConfig+0x44a>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ff2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x3a0>
 800100a:	4b93      	ldr	r3, [pc, #588]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	e013      	b.n	8001038 <HAL_RCC_OscConfig+0x3c8>
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001028:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001034:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2202      	movs	r2, #2
 800103a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800103e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001042:	fa92 f2a2 	rbit	r2, r2
 8001046:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800104a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f002 021f 	and.w	r2, r2, #31
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <HAL_RCC_OscConfig+0x410>
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f000 be2e 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	21f8      	movs	r1, #248	; 0xf8
 8001096:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800109e:	fa91 f1a1 	rbit	r1, r1
 80010a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010aa:	fab1 f181 	clz	r1, r1
 80010ae:	b2c9      	uxtb	r1, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	4969      	ldr	r1, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b8:	e0fd      	b.n	80012b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8088 	beq.w	80011dc <HAL_RCC_OscConfig+0x56c>
 80010cc:	2301      	movs	r3, #1
 80010ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	461a      	mov	r2, r3
 80010f4:	2301      	movs	r3, #1
 80010f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb1a 	bl	8000730 <HAL_GetTick>
 80010fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fb15 	bl	8000730 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d902      	bls.n	8001118 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	f000 bde2 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800112a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x4d8>
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	e013      	b.n	8001170 <HAL_RCC_OscConfig+0x500>
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001160:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2202      	movs	r2, #2
 8001172:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001176:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001182:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0af      	beq.n	8001102 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	21f8      	movs	r1, #248	; 0xf8
 80011b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011c0:	fa91 f1a1 	rbit	r1, r1
 80011c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011cc:	fab1 f181 	clz	r1, r1
 80011d0:	b2c9      	uxtb	r1, r1
 80011d2:	408b      	lsls	r3, r1
 80011d4:	4920      	ldr	r1, [pc, #128]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e06c      	b.n	80012b6 <HAL_RCC_OscConfig+0x646>
 80011dc:	2301      	movs	r3, #1
 80011de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	461a      	mov	r2, r3
 8001204:	2300      	movs	r3, #0
 8001206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fa92 	bl	8000730 <HAL_GetTick>
 800120c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fa8d 	bl	8000730 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d902      	bls.n	8001228 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	f000 bd5a 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800123a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d104      	bne.n	800125c <HAL_RCC_OscConfig+0x5ec>
 8001252:	4b01      	ldr	r3, [pc, #4]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x614>
 8001258:	40021000 	.word	0x40021000
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001274:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001280:	4bc8      	ldr	r3, [pc, #800]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	2202      	movs	r2, #2
 8001286:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800128a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001296:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ad      	bne.n	8001212 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8110 	beq.w	80014ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d079      	beq.n	80013d0 <HAL_RCC_OscConfig+0x760>
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4bab      	ldr	r3, [pc, #684]	; (80015a8 <HAL_RCC_OscConfig+0x938>)
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	2301      	movs	r3, #1
 8001304:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fa13 	bl	8000730 <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fa0e 	bl	8000730 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 bcdb 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f2a3 	rbit	r2, r3
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800137e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800138c:	2102      	movs	r1, #2
 800138e:	6019      	str	r1, [r3, #0]
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f1a3 	rbit	r1, r3
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013a6:	6019      	str	r1, [r3, #0]
  return result;
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0a0      	beq.n	8001310 <HAL_RCC_OscConfig+0x6a0>
 80013ce:	e08d      	b.n	80014ec <HAL_RCC_OscConfig+0x87c>
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013f2:	601a      	str	r2, [r3, #0]
  return result;
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x938>)
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff f98d 	bl	8000730 <HAL_GetTick>
 8001416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff f988 	bl	8000730 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d902      	bls.n	8001432 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	f000 bc55 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800149c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014aa:	2102      	movs	r1, #2
 80014ac:	6019      	str	r1, [r3, #0]
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f1a3 	rbit	r1, r3
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014c4:	6019      	str	r1, [r3, #0]
  return result;
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d197      	bne.n	800141c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 81a1 	beq.w	8001844 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d116      	bne.n	8001542 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800153a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff f8e9 	bl	8000730 <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	e009      	b.n	8001578 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7ff f8e4 	bl	8000730 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e3b1      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ef      	beq.n	8001564 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_OscConfig+0x940>
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a02      	ldr	r2, [pc, #8]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e03c      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	10908120 	.word	0x10908120
 80015ac:	40007000 	.word	0x40007000
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x96a>
 80015c0:	4bc1      	ldr	r3, [pc, #772]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4ac0      	ldr	r2, [pc, #768]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4bbe      	ldr	r3, [pc, #760]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4abd      	ldr	r2, [pc, #756]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e020      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x994>
 80015ea:	4bb7      	ldr	r3, [pc, #732]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4ab6      	ldr	r2, [pc, #728]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4bb4      	ldr	r3, [pc, #720]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4ab3      	ldr	r2, [pc, #716]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 8001604:	4bb0      	ldr	r3, [pc, #704]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4aaf      	ldr	r2, [pc, #700]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	4bad      	ldr	r3, [pc, #692]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4aac      	ldr	r2, [pc, #688]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8081 	beq.w	8001730 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff f87f 	bl	8000730 <HAL_GetTick>
 8001632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff f87a 	bl	8000730 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e345      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001696:	601a      	str	r2, [r3, #0]
  return result;
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d102      	bne.n	80016bc <HAL_RCC_OscConfig+0xa4c>
 80016b6:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	e013      	b.n	80016e4 <HAL_RCC_OscConfig+0xa74>
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c4:	2202      	movs	r2, #2
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fa93 f2a3 	rbit	r2, r3
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016ec:	2102      	movs	r1, #2
 80016ee:	6011      	str	r1, [r2, #0]
 80016f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	fa92 f1a2 	rbit	r1, r2
 80016fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001702:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001706:	6011      	str	r1, [r2, #0]
  return result;
 8001708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	fab2 f282 	clz	r2, r2
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f002 021f 	and.w	r2, r2, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d084      	beq.n	8001638 <HAL_RCC_OscConfig+0x9c8>
 800172e:	e07f      	b.n	8001830 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7fe fffe 	bl	8000730 <HAL_GetTick>
 8001734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7fe fff9 	bl	8000730 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2c4      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001798:	601a      	str	r2, [r3, #0]
  return result;
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d102      	bne.n	80017be <HAL_RCC_OscConfig+0xb4e>
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	e013      	b.n	80017e6 <HAL_RCC_OscConfig+0xb76>
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017ee:	2102      	movs	r1, #2
 80017f0:	6011      	str	r1, [r2, #0]
 80017f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001804:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001808:	6011      	str	r1, [r2, #0]
  return result;
 800180a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d184      	bne.n	800173a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001830:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8242 	beq.w	8001cda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	f000 8213 	beq.w	8001c8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b02      	cmp	r3, #2
 8001872:	f040 8162 	bne.w	8001b3a <HAL_RCC_OscConfig+0xeca>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800187e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800189a:	601a      	str	r2, [r3, #0]
  return result;
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	461a      	mov	r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7fe ff38 	bl	8000730 <HAL_GetTick>
 80018c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	e00c      	b.n	80018e0 <HAL_RCC_OscConfig+0xc70>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe ff30 	bl	8000730 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1fd      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800190e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0xcba>
 8001924:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e027      	b.n	800197a <HAL_RCC_OscConfig+0xd0a>
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4b9c      	ldr	r3, [pc, #624]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800197e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001982:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001986:	6011      	str	r1, [r2, #0]
 8001988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fa92 f1a2 	rbit	r1, r2
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800199e:	6011      	str	r1, [r2, #0]
  return result;
 80019a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	fab2 f282 	clz	r2, r2
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f042 0220 	orr.w	r2, r2, #32
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f002 021f 	and.w	r2, r2, #31
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d182      	bne.n	80018cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	430b      	orrs	r3, r1
 80019e8:	497f      	ldr	r1, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a12:	601a      	str	r2, [r3, #0]
  return result;
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7fe fe7c 	bl	8000730 <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe fe77 	bl	8000730 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e144      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a76:	601a      	str	r2, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe2c>
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e027      	b.n	8001aec <HAL_RCC_OscConfig+0xe7c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af8:	6011      	str	r1, [r2, #0]
 8001afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	fa92 f1a2 	rbit	r1, r2
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b10:	6011      	str	r1, [r2, #0]
  return result;
 8001b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d082      	beq.n	8001a3e <HAL_RCC_OscConfig+0xdce>
 8001b38:	e0cf      	b.n	8001cda <HAL_RCC_OscConfig+0x106a>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fdd6 	bl	8000730 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe fdd1 	bl	8000730 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e09e      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d104      	bne.n	8001bec <HAL_RCC_OscConfig+0xf7c>
 8001be2:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e029      	b.n	8001c3c <HAL_RCC_OscConfig+0xfcc>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x1078>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c40:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c48:	6011      	str	r1, [r2, #0]
 8001c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fa92 f1a2 	rbit	r1, r2
 8001c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c60:	6011      	str	r1, [r2, #0]
  return result;
 8001c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	fab2 f282 	clz	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d180      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf1a>
 8001c88:	e027      	b.n	8001cda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e01e      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_OscConfig+0x1078>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001caa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b09e      	sub	sp, #120	; 0x78
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e162      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	498b      	ldr	r1, [pc, #556]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e14a      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	497f      	ldr	r1, [pc, #508]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80dc 	beq.w	8001f18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d13c      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xf6>
 8001d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xa6>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e00f      	b.n	8001db2 <HAL_RCC_ClockConfig+0xc6>
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d17b      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0f3      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d13c      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x178>
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x128>
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_ClockConfig+0x148>
 8001e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
 8001e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
 8001e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13a      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b2      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1a0>
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1bc>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	61ba      	str	r2, [r7, #24]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	617a      	str	r2, [r7, #20]
  return result;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e079      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fc22 	bl	8000730 <HAL_GetTick>
 8001eec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fc1e 	bl	8000730 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e061      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d214      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e040      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4912      	ldr	r1, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f8e:	f000 f829 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	40d3      	lsrs	r3, r2
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_ClockConfig+0x2f0>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fb70 	bl	80006a8 <HAL_InitTick>
  
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3778      	adds	r7, #120	; 0x78
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	0800348c 	.word	0x0800348c
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x30>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x36>
 8002012:	e03c      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e03c      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002024:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	607a      	str	r2, [r7, #4]
  return result;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	220f      	movs	r2, #15
 8002048:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	fa92 f2a2 	rbit	r2, r2
 8002050:	60fa      	str	r2, [r7, #12]
  return result;
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	40d3      	lsrs	r3, r2
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fbb2 f2f3 	udiv	r2, r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
 800207c:	e004      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	e002      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002090:	623b      	str	r3, [r7, #32]
      break;
 8002092:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002094:	6a3b      	ldr	r3, [r7, #32]
}
 8002096:	4618      	mov	r0, r3
 8002098:	372c      	adds	r7, #44	; 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	080034a4 	.word	0x080034a4
 80020b0:	080034b4 	.word	0x080034b4
 80020b4:	003d0900 	.word	0x003d0900

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020d6:	f7ff ffef 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020da:	4601      	mov	r1, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	603a      	str	r2, [r7, #0]
  return result;
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	0800349c 	.word	0x0800349c

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800211a:	f7ff ffcd 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 800211e:	4601      	mov	r1, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002128:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800212c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	603a      	str	r2, [r7, #0]
  return result;
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	40d3      	lsrs	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	0800349c 	.word	0x0800349c

08002158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e09d      	b.n	80022a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217a:	d009      	beq.n	8002190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
 8002182:	e005      	b.n	8002190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe f97a 	bl	80004a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021d0:	d902      	bls.n	80021d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e002      	b.n	80021de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021e6:	d007      	beq.n	80021f8 <HAL_SPI_Init+0xa0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	ea42 0103 	orr.w	r1, r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	f003 0204 	and.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002274:	ea42 0103 	orr.w	r1, r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_SPI_Transmit+0x22>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e15f      	b.n	8002590 <HAL_SPI_Transmit+0x2e2>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d8:	f7fe fa2a 	bl	8000730 <HAL_GetTick>
 80022dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d002      	beq.n	80022f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022f2:	e148      	b.n	8002586 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Transmit+0x52>
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002304:	e13f      	b.n	8002586 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2203      	movs	r2, #3
 800230a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	d10f      	bne.n	8002372 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d007      	beq.n	8002390 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002398:	d94f      	bls.n	800243a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0xfa>
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d142      	bne.n	800242e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023cc:	e02f      	b.n	800242e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d112      	bne.n	8002402 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002400:	e015      	b.n	800242e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002402:	f7fe f995 	bl	8000730 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d803      	bhi.n	800241a <HAL_SPI_Transmit+0x16c>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002418:	d102      	bne.n	8002420 <HAL_SPI_Transmit+0x172>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800242c:	e0ab      	b.n	8002586 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ca      	bne.n	80023ce <HAL_SPI_Transmit+0x120>
 8002438:	e080      	b.n	800253c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Transmit+0x19a>
 8002442:	8afb      	ldrh	r3, [r7, #22]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d174      	bne.n	8002532 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d912      	bls.n	8002478 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b02      	subs	r3, #2
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002476:	e05c      	b.n	8002532 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800249e:	e048      	b.n	8002532 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d12b      	bne.n	8002506 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d912      	bls.n	80024de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	1c9a      	adds	r2, r3, #2
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b02      	subs	r3, #2
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024dc:	e029      	b.n	8002532 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002504:	e015      	b.n	8002532 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002506:	f7fe f913 	bl	8000730 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d803      	bhi.n	800251e <HAL_SPI_Transmit+0x270>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251c:	d102      	bne.n	8002524 <HAL_SPI_Transmit+0x276>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002530:	e029      	b.n	8002586 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1b1      	bne.n	80024a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f947 	bl	80027d4 <SPI_EndRxTxTransaction>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	77fb      	strb	r3, [r7, #31]
 800257c:	e003      	b.n	8002586 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025a8:	f7fe f8c2 	bl	8000730 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025b8:	f7fe f8ba 	bl	8000730 <HAL_GetTick>
 80025bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	015b      	lsls	r3, r3, #5
 80025c4:	0d1b      	lsrs	r3, r3, #20
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ce:	e054      	b.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d6:	d050      	beq.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025d8:	f7fe f8aa 	bl	8000730 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d902      	bls.n	80025ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d13d      	bne.n	800266a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002606:	d111      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002610:	d004      	beq.n	800261c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d107      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	d10f      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e017      	b.n	800269a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b01      	subs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	429a      	cmp	r2, r3
 8002696:	d19b      	bne.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000

080026a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ba:	f7fe f839 	bl	8000730 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80026ca:	f7fe f831 	bl	8000730 <HAL_GetTick>
 80026ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00da      	lsls	r2, r3, #3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026f0:	e060      	b.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026f8:	d107      	bne.n	800270a <SPI_WaitFifoStateUntilTimeout+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002708:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d050      	beq.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002712:	f7fe f80d 	bl	8000730 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	429a      	cmp	r2, r3
 8002720:	d902      	bls.n	8002728 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d13d      	bne.n	80027a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002740:	d111      	bne.n	8002766 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800274a:	d004      	beq.n	8002756 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d107      	bne.n	8002766 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276e:	d10f      	bne.n	8002790 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800278e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e010      	b.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d196      	bne.n	80026f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff ff5b 	bl	80026a8 <SPI_WaitFifoStateUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e027      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fec0 	bl	8002598 <SPI_WaitFlagStateUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e014      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff34 	bl	80026a8 <SPI_WaitFifoStateUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e000      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e040      	b.n	80028f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd fe52 	bl	800052c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f82c 	bl	80028fc <UART_SetConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f956 	bl	8002b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f9dd 	bl	8002cac <UART_CheckIdleState>
 80028f2:	4603      	mov	r3, r0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b8a      	ldr	r3, [pc, #552]	; (8002b50 <UART_SetConfig+0x254>)
 8002928:	4013      	ands	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	6979      	ldr	r1, [r7, #20]
 8002930:	430b      	orrs	r3, r1
 8002932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <UART_SetConfig+0x258>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d120      	bne.n	80029ba <UART_SetConfig+0xbe>
 8002978:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <UART_SetConfig+0x25c>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d817      	bhi.n	80029b4 <UART_SetConfig+0xb8>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <UART_SetConfig+0x90>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029a9 	.word	0x080029a9
 8002994:	080029af 	.word	0x080029af
 8002998:	080029a3 	.word	0x080029a3
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e01d      	b.n	80029de <UART_SetConfig+0xe2>
 80029a2:	2302      	movs	r3, #2
 80029a4:	77fb      	strb	r3, [r7, #31]
 80029a6:	e01a      	b.n	80029de <UART_SetConfig+0xe2>
 80029a8:	2304      	movs	r3, #4
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	e017      	b.n	80029de <UART_SetConfig+0xe2>
 80029ae:	2308      	movs	r3, #8
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e014      	b.n	80029de <UART_SetConfig+0xe2>
 80029b4:	2310      	movs	r3, #16
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e011      	b.n	80029de <UART_SetConfig+0xe2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <UART_SetConfig+0x260>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d102      	bne.n	80029ca <UART_SetConfig+0xce>
 80029c4:	2300      	movs	r3, #0
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e009      	b.n	80029de <UART_SetConfig+0xe2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a64      	ldr	r2, [pc, #400]	; (8002b60 <UART_SetConfig+0x264>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <UART_SetConfig+0xde>
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e001      	b.n	80029de <UART_SetConfig+0xe2>
 80029da:	2310      	movs	r3, #16
 80029dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	d15a      	bne.n	8002a9e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80029e8:	7ffb      	ldrb	r3, [r7, #31]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d827      	bhi.n	8002a3e <UART_SetConfig+0x142>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <UART_SetConfig+0xf8>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a19 	.word	0x08002a19
 80029f8:	08002a21 	.word	0x08002a21
 80029fc:	08002a29 	.word	0x08002a29
 8002a00:	08002a3f 	.word	0x08002a3f
 8002a04:	08002a2f 	.word	0x08002a2f
 8002a08:	08002a3f 	.word	0x08002a3f
 8002a0c:	08002a3f 	.word	0x08002a3f
 8002a10:	08002a3f 	.word	0x08002a3f
 8002a14:	08002a37 	.word	0x08002a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a18:	f7ff fb5a 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	61b8      	str	r0, [r7, #24]
        break;
 8002a1e:	e013      	b.n	8002a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7ff fb78 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8002a24:	61b8      	str	r0, [r7, #24]
        break;
 8002a26:	e00f      	b.n	8002a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a28:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <UART_SetConfig+0x268>)
 8002a2a:	61bb      	str	r3, [r7, #24]
        break;
 8002a2c:	e00c      	b.n	8002a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2e:	f7ff fad9 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8002a32:	61b8      	str	r0, [r7, #24]
        break;
 8002a34:	e008      	b.n	8002a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3a:	61bb      	str	r3, [r7, #24]
        break;
 8002a3c:	e004      	b.n	8002a48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	77bb      	strb	r3, [r7, #30]
        break;
 8002a46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d074      	beq.n	8002b38 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d916      	bls.n	8002a98 <UART_SetConfig+0x19c>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d212      	bcs.n	8002a98 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f023 030f 	bic.w	r3, r3, #15
 8002a7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	89fa      	ldrh	r2, [r7, #14]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e04f      	b.n	8002b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77bb      	strb	r3, [r7, #30]
 8002a9c:	e04c      	b.n	8002b38 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d828      	bhi.n	8002af6 <UART_SetConfig+0x1fa>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <UART_SetConfig+0x1b0>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002af7 	.word	0x08002af7
 8002abc:	08002ae7 	.word	0x08002ae7
 8002ac0:	08002af7 	.word	0x08002af7
 8002ac4:	08002af7 	.word	0x08002af7
 8002ac8:	08002af7 	.word	0x08002af7
 8002acc:	08002aef 	.word	0x08002aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f7ff fafe 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	61b8      	str	r0, [r7, #24]
        break;
 8002ad6:	e013      	b.n	8002b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff fb1c 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8002adc:	61b8      	str	r0, [r7, #24]
        break;
 8002ade:	e00f      	b.n	8002b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <UART_SetConfig+0x268>)
 8002ae2:	61bb      	str	r3, [r7, #24]
        break;
 8002ae4:	e00c      	b.n	8002b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae6:	f7ff fa7d 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8002aea:	61b8      	str	r0, [r7, #24]
        break;
 8002aec:	e008      	b.n	8002b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	61bb      	str	r3, [r7, #24]
        break;
 8002af4:	e004      	b.n	8002b00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	77bb      	strb	r3, [r7, #30]
        break;
 8002afe:	bf00      	nop
    }

    if (pclk != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	085a      	lsrs	r2, r3, #1
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	d909      	bls.n	8002b34 <UART_SetConfig+0x238>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b26:	d205      	bcs.n	8002b34 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e001      	b.n	8002b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	efff69f3 	.word	0xefff69f3
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	40004800 	.word	0x40004800
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01a      	beq.n	8002c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c66:	d10a      	bne.n	8002c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b098      	sub	sp, #96	; 0x60
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cbc:	f7fd fd38 	bl	8000730 <HAL_GetTick>
 8002cc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d12e      	bne.n	8002d2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f88c 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d021      	beq.n	8002d2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e6      	bne.n	8002cea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e062      	b.n	8002df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d149      	bne.n	8002dd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d44:	2200      	movs	r2, #0
 8002d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f856 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03c      	beq.n	8002dd0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	623b      	str	r3, [r7, #32]
   return(result);
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
 8002d76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e6      	bne.n	8002d56 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3308      	adds	r3, #8
 8002da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	617b      	str	r3, [r7, #20]
   return(result);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e011      	b.n	8002df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3758      	adds	r7, #88	; 0x58
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	e049      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d045      	beq.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fd fc8b 	bl	8000730 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e048      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d031      	beq.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d110      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2208      	movs	r2, #8
 8002e52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f838 	bl	8002eca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e029      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d111      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f81e 	bl	8002eca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e00f      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d0a6      	beq.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b095      	sub	sp, #84	; 0x54
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e6      	bne.n	8002ed2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3308      	adds	r3, #8
 8002f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d118      	bne.n	8002f72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f023 0310 	bic.w	r3, r3, #16
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e6      	bne.n	8002f40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f86:	bf00      	nop
 8002f88:	3754      	adds	r7, #84	; 0x54
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2140      	movs	r1, #64	; 0x40
 8002f9c:	480a      	ldr	r0, [pc, #40]	; (8002fc8 <ssd1306_Reset+0x34>)
 8002f9e:	f7fd fe4f 	bl	8000c40 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	4808      	ldr	r0, [pc, #32]	; (8002fc8 <ssd1306_Reset+0x34>)
 8002fa8:	f7fd fe4a 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002fac:	200a      	movs	r0, #10
 8002fae:	f7fd fbcb 	bl	8000748 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2120      	movs	r1, #32
 8002fb6:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <ssd1306_Reset+0x34>)
 8002fb8:	f7fd fe42 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002fbc:	200a      	movs	r0, #10
 8002fbe:	f7fd fbc3 	bl	8000748 <HAL_Delay>
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	48000400 	.word	0x48000400

08002fcc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2140      	movs	r1, #64	; 0x40
 8002fda:	480c      	ldr	r0, [pc, #48]	; (800300c <ssd1306_WriteCommand+0x40>)
 8002fdc:	f7fd fe30 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe6:	4809      	ldr	r0, [pc, #36]	; (800300c <ssd1306_WriteCommand+0x40>)
 8002fe8:	f7fd fe2a 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002fec:	1df9      	adds	r1, r7, #7
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <ssd1306_WriteCommand+0x44>)
 8002ff6:	f7ff f95a 	bl	80022ae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	4803      	ldr	r0, [pc, #12]	; (800300c <ssd1306_WriteCommand+0x40>)
 8003000:	f7fd fe1e 	bl	8000c40 <HAL_GPIO_WritePin>
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	48000400 	.word	0x48000400
 8003010:	20000028 	.word	0x20000028

08003014 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800301e:	2200      	movs	r2, #0
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <ssd1306_WriteData+0x44>)
 8003024:	f7fd fe0c 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8003028:	2201      	movs	r2, #1
 800302a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800302e:	480a      	ldr	r0, [pc, #40]	; (8003058 <ssd1306_WriteData+0x44>)
 8003030:	f7fd fe06 	bl	8000c40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b29a      	uxth	r2, r3
 8003038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <ssd1306_WriteData+0x48>)
 8003040:	f7ff f935 	bl	80022ae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8003044:	2201      	movs	r2, #1
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <ssd1306_WriteData+0x44>)
 800304a:	f7fd fdf9 	bl	8000c40 <HAL_GPIO_WritePin>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	48000400 	.word	0x48000400
 800305c:	20000028 	.word	0x20000028

08003060 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003064:	f7ff ff96 	bl	8002f94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	f7fd fb6d 	bl	8000748 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800306e:	2000      	movs	r0, #0
 8003070:	f000 f9b6 	bl	80033e0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003074:	2020      	movs	r0, #32
 8003076:	f7ff ffa9 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff ffa6 	bl	8002fcc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003080:	20b0      	movs	r0, #176	; 0xb0
 8003082:	f7ff ffa3 	bl	8002fcc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003086:	20c8      	movs	r0, #200	; 0xc8
 8003088:	f7ff ffa0 	bl	8002fcc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff ff9d 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003092:	2010      	movs	r0, #16
 8003094:	f7ff ff9a 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003098:	2040      	movs	r0, #64	; 0x40
 800309a:	f7ff ff97 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800309e:	20ff      	movs	r0, #255	; 0xff
 80030a0:	f000 f98b 	bl	80033ba <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80030a4:	20a1      	movs	r0, #161	; 0xa1
 80030a6:	f7ff ff91 	bl	8002fcc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80030aa:	20a6      	movs	r0, #166	; 0xa6
 80030ac:	f7ff ff8e 	bl	8002fcc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80030b0:	20a8      	movs	r0, #168	; 0xa8
 80030b2:	f7ff ff8b 	bl	8002fcc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80030b6:	203f      	movs	r0, #63	; 0x3f
 80030b8:	f7ff ff88 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80030bc:	20a4      	movs	r0, #164	; 0xa4
 80030be:	f7ff ff85 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80030c2:	20d3      	movs	r0, #211	; 0xd3
 80030c4:	f7ff ff82 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff ff7f 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80030ce:	20d5      	movs	r0, #213	; 0xd5
 80030d0:	f7ff ff7c 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80030d4:	20f0      	movs	r0, #240	; 0xf0
 80030d6:	f7ff ff79 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80030da:	20d9      	movs	r0, #217	; 0xd9
 80030dc:	f7ff ff76 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80030e0:	2022      	movs	r0, #34	; 0x22
 80030e2:	f7ff ff73 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80030e6:	20da      	movs	r0, #218	; 0xda
 80030e8:	f7ff ff70 	bl	8002fcc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80030ec:	2012      	movs	r0, #18
 80030ee:	f7ff ff6d 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80030f2:	20db      	movs	r0, #219	; 0xdb
 80030f4:	f7ff ff6a 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80030f8:	2020      	movs	r0, #32
 80030fa:	f7ff ff67 	bl	8002fcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80030fe:	208d      	movs	r0, #141	; 0x8d
 8003100:	f7ff ff64 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003104:	2014      	movs	r0, #20
 8003106:	f7ff ff61 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800310a:	2001      	movs	r0, #1
 800310c:	f000 f968 	bl	80033e0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003110:	2000      	movs	r0, #0
 8003112:	f000 f80f 	bl	8003134 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003116:	f000 f831 	bl	800317c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <ssd1306_Init+0xd0>)
 800311c:	2200      	movs	r2, #0
 800311e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <ssd1306_Init+0xd0>)
 8003122:	2200      	movs	r2, #0
 8003124:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003126:	4b02      	ldr	r3, [pc, #8]	; (8003130 <ssd1306_Init+0xd0>)
 8003128:	2201      	movs	r2, #1
 800312a:	711a      	strb	r2, [r3, #4]
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000518 	.word	0x20000518

08003134 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e00d      	b.n	8003160 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <ssd1306_Fill+0x1a>
 800314a:	2100      	movs	r1, #0
 800314c:	e000      	b.n	8003150 <ssd1306_Fill+0x1c>
 800314e:	21ff      	movs	r1, #255	; 0xff
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <ssd1306_Fill+0x44>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	460a      	mov	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d3ed      	bcc.n	8003144 <ssd1306_Fill+0x10>
    }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000118 	.word	0x20000118

0800317c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	e016      	b.n	80031b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	3b50      	subs	r3, #80	; 0x50
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff1c 	bl	8002fcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff ff19 	bl	8002fcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800319a:	2010      	movs	r0, #16
 800319c:	f7ff ff16 	bl	8002fcc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	01db      	lsls	r3, r3, #7
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <ssd1306_UpdateScreen+0x4c>)
 80031a6:	4413      	add	r3, r2
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff32 	bl	8003014 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	3301      	adds	r3, #1
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d9e5      	bls.n	8003188 <ssd1306_UpdateScreen+0xc>
    }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000118 	.word	0x20000118

080031cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
 80031d6:	460b      	mov	r3, r1
 80031d8:	71bb      	strb	r3, [r7, #6]
 80031da:	4613      	mov	r3, r2
 80031dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db3d      	blt.n	8003262 <ssd1306_DrawPixel+0x96>
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	2b3f      	cmp	r3, #63	; 0x3f
 80031ea:	d83a      	bhi.n	8003262 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80031ec:	797b      	ldrb	r3, [r7, #5]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d11a      	bne.n	8003228 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031f2:	79fa      	ldrb	r2, [r7, #7]
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	01db      	lsls	r3, r3, #7
 80031fe:	4413      	add	r3, r2
 8003200:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <ssd1306_DrawPixel+0xa4>)
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	b25a      	sxtb	r2, r3
 8003206:	79bb      	ldrb	r3, [r7, #6]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	b25b      	sxtb	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	b259      	sxtb	r1, r3
 8003218:	79fa      	ldrb	r2, [r7, #7]
 800321a:	4603      	mov	r3, r0
 800321c:	01db      	lsls	r3, r3, #7
 800321e:	4413      	add	r3, r2
 8003220:	b2c9      	uxtb	r1, r1
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <ssd1306_DrawPixel+0xa4>)
 8003224:	54d1      	strb	r1, [r2, r3]
 8003226:	e01d      	b.n	8003264 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003228:	79fa      	ldrb	r2, [r7, #7]
 800322a:	79bb      	ldrb	r3, [r7, #6]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	b2d8      	uxtb	r0, r3
 8003230:	4603      	mov	r3, r0
 8003232:	01db      	lsls	r3, r3, #7
 8003234:	4413      	add	r3, r2
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <ssd1306_DrawPixel+0xa4>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	b25a      	sxtb	r2, r3
 800323c:	79bb      	ldrb	r3, [r7, #6]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	b25b      	sxtb	r3, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	b25b      	sxtb	r3, r3
 800324e:	4013      	ands	r3, r2
 8003250:	b259      	sxtb	r1, r3
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	4603      	mov	r3, r0
 8003256:	01db      	lsls	r3, r3, #7
 8003258:	4413      	add	r3, r2
 800325a:	b2c9      	uxtb	r1, r1
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <ssd1306_DrawPixel+0xa4>)
 800325e:	54d1      	strb	r1, [r2, r3]
 8003260:	e000      	b.n	8003264 <ssd1306_DrawPixel+0x98>
        return;
 8003262:	bf00      	nop
    }
}
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000118 	.word	0x20000118

08003274 <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	71fb      	strb	r3, [r7, #7]
 8003286:	4603      	mov	r3, r0
 8003288:	71bb      	strb	r3, [r7, #6]
 800328a:	460b      	mov	r3, r1
 800328c:	717b      	strb	r3, [r7, #5]
 800328e:	4613      	mov	r3, r2
 8003290:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003292:	797a      	ldrb	r2, [r7, #5]
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bfb8      	it	lt
 800329c:	425b      	neglt	r3, r3
 800329e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80032a0:	793a      	ldrb	r2, [r7, #4]
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfb8      	it	lt
 80032aa:	425b      	neglt	r3, r3
 80032ac:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80032ae:	79fa      	ldrb	r2, [r7, #7]
 80032b0:	797b      	ldrb	r3, [r7, #5]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d201      	bcs.n	80032ba <ssd1306_Line+0x46>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e001      	b.n	80032be <ssd1306_Line+0x4a>
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032be:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80032c0:	79ba      	ldrb	r2, [r7, #6]
 80032c2:	793b      	ldrb	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d201      	bcs.n	80032cc <ssd1306_Line+0x58>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e001      	b.n	80032d0 <ssd1306_Line+0x5c>
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80032da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80032de:	7939      	ldrb	r1, [r7, #4]
 80032e0:	797b      	ldrb	r3, [r7, #5]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff72 	bl	80031cc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80032e8:	e024      	b.n	8003334 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80032ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80032ee:	79b9      	ldrb	r1, [r7, #6]
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff6a 	bl	80031cc <ssd1306_DrawPixel>
        error2 = error * 2;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	425b      	negs	r3, r3
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	dd08      	ble.n	800331a <ssd1306_Line+0xa6>
            error -= deltaY;
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4413      	add	r3, r2
 8003318:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	429a      	cmp	r2, r3
 8003320:	da08      	bge.n	8003334 <ssd1306_Line+0xc0>
            error += deltaX;
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	4413      	add	r3, r2
 8003332:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	797b      	ldrb	r3, [r7, #5]
 8003338:	429a      	cmp	r2, r3
 800333a:	d1d6      	bne.n	80032ea <ssd1306_Line+0x76>
 800333c:	79ba      	ldrb	r2, [r7, #6]
 800333e:	793b      	ldrb	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d1d2      	bne.n	80032ea <ssd1306_Line+0x76>
        }
    }
    return;
 8003344:	bf00      	nop
}
 8003346:	3724      	adds	r7, #36	; 0x24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}

0800334c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af02      	add	r7, sp, #8
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4603      	mov	r3, r0
 8003360:	71bb      	strb	r3, [r7, #6]
 8003362:	460b      	mov	r3, r1
 8003364:	717b      	strb	r3, [r7, #5]
 8003366:	4613      	mov	r3, r2
 8003368:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800336a:	79bc      	ldrb	r4, [r7, #6]
 800336c:	797a      	ldrb	r2, [r7, #5]
 800336e:	79b9      	ldrb	r1, [r7, #6]
 8003370:	79f8      	ldrb	r0, [r7, #7]
 8003372:	7e3b      	ldrb	r3, [r7, #24]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4623      	mov	r3, r4
 8003378:	f7ff ff7c 	bl	8003274 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800337c:	793c      	ldrb	r4, [r7, #4]
 800337e:	797a      	ldrb	r2, [r7, #5]
 8003380:	79b9      	ldrb	r1, [r7, #6]
 8003382:	7978      	ldrb	r0, [r7, #5]
 8003384:	7e3b      	ldrb	r3, [r7, #24]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4623      	mov	r3, r4
 800338a:	f7ff ff73 	bl	8003274 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800338e:	793c      	ldrb	r4, [r7, #4]
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	7939      	ldrb	r1, [r7, #4]
 8003394:	7978      	ldrb	r0, [r7, #5]
 8003396:	7e3b      	ldrb	r3, [r7, #24]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4623      	mov	r3, r4
 800339c:	f7ff ff6a 	bl	8003274 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80033a0:	79bc      	ldrb	r4, [r7, #6]
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	7939      	ldrb	r1, [r7, #4]
 80033a6:	79f8      	ldrb	r0, [r7, #7]
 80033a8:	7e3b      	ldrb	r3, [r7, #24]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4623      	mov	r3, r4
 80033ae:	f7ff ff61 	bl	8003274 <ssd1306_Line>

    return;
 80033b2:	bf00      	nop
}
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}

080033ba <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80033c4:	2381      	movs	r3, #129	; 0x81
 80033c6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fdfe 	bl	8002fcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fdfa 	bl	8002fcc <ssd1306_WriteCommand>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80033f0:	23af      	movs	r3, #175	; 0xaf
 80033f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <ssd1306_SetDisplayOn+0x38>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	715a      	strb	r2, [r3, #5]
 80033fa:	e004      	b.n	8003406 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80033fc:	23ae      	movs	r3, #174	; 0xae
 80033fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <ssd1306_SetDisplayOn+0x38>)
 8003402:	2200      	movs	r2, #0
 8003404:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fddf 	bl	8002fcc <ssd1306_WriteCommand>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000518 	.word	0x20000518

0800341c <memset>:
 800341c:	4402      	add	r2, r0
 800341e:	4603      	mov	r3, r0
 8003420:	4293      	cmp	r3, r2
 8003422:	d100      	bne.n	8003426 <memset+0xa>
 8003424:	4770      	bx	lr
 8003426:	f803 1b01 	strb.w	r1, [r3], #1
 800342a:	e7f9      	b.n	8003420 <memset+0x4>

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4d0d      	ldr	r5, [pc, #52]	; (8003464 <__libc_init_array+0x38>)
 8003430:	4c0d      	ldr	r4, [pc, #52]	; (8003468 <__libc_init_array+0x3c>)
 8003432:	1b64      	subs	r4, r4, r5
 8003434:	10a4      	asrs	r4, r4, #2
 8003436:	2600      	movs	r6, #0
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	4d0b      	ldr	r5, [pc, #44]	; (800346c <__libc_init_array+0x40>)
 800343e:	4c0c      	ldr	r4, [pc, #48]	; (8003470 <__libc_init_array+0x44>)
 8003440:	f000 f818 	bl	8003474 <_init>
 8003444:	1b64      	subs	r4, r4, r5
 8003446:	10a4      	asrs	r4, r4, #2
 8003448:	2600      	movs	r6, #0
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	080034c4 	.word	0x080034c4
 8003468:	080034c4 	.word	0x080034c4
 800346c:	080034c4 	.word	0x080034c4
 8003470:	080034c8 	.word	0x080034c8

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
